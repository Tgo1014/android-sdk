/**
* API
* This is the public API for nstack.io  Setup an application and use Application-Id and Rest-Api-Key
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package dk.nodes.nstack.kotlin.codegen.model


import kotlinx.serialization.*
import kotlinx.serialization.internal.CommonEnumSerializer
/**
 * 
 * @param title 
 * @param noPosts 
 * @param goDiscover 
 * @param report 
 * @param edit 
 * @param delete 
 * @param reportTitle 
 * @param reportMessage 
 * @param deleteTitle 
 * @param deleteMessage 
 * @param postNotFoundTitle 
 * @param postNotFoundMessage 
 * @param postAlreadyReportedTitle 
 * @param postAlreadyReportedMessage 
 * @param postDeleteNotUsersMessage 
 * @param myBody 
 * @param likeSingular 
 * @param likePlural 
 * @param reportSuccess 
 * @param option 
 * @param deleteSuccess 
 * @param deleteCancel 
 * @param reportCancel 
 * @param photoTitle 
 * @param peopleYouFollow 
 * @param findPeopleToFollow 
 * @param skip 
 * @param suggestedProfiles 
 * @param tattoosOfTheDay 
 * @param coverStories 
 * @param discoverTattooStyles 
 */
@Serializable
data class Feed (
    @SerialName(value = "title") @Required val title: kotlin.String,
    @SerialName(value = "noPosts") @Required val noPosts: kotlin.String,
    @SerialName(value = "goDiscover") @Required val goDiscover: kotlin.String,
    @SerialName(value = "report") @Required val report: kotlin.String,
    @SerialName(value = "edit") @Required val edit: kotlin.String,
    @SerialName(value = "delete") @Required val delete: kotlin.String,
    @SerialName(value = "reportTitle") @Required val reportTitle: kotlin.String,
    @SerialName(value = "reportMessage") @Required val reportMessage: kotlin.String,
    @SerialName(value = "deleteTitle") @Required val deleteTitle: kotlin.String,
    @SerialName(value = "deleteMessage") @Required val deleteMessage: kotlin.String,
    @SerialName(value = "postNotFoundTitle") @Required val postNotFoundTitle: kotlin.String,
    @SerialName(value = "postNotFoundMessage") @Required val postNotFoundMessage: kotlin.String,
    @SerialName(value = "postAlreadyReportedTitle") @Required val postAlreadyReportedTitle: kotlin.String,
    @SerialName(value = "postAlreadyReportedMessage") @Required val postAlreadyReportedMessage: kotlin.String,
    @SerialName(value = "postDeleteNotUsersMessage") @Required val postDeleteNotUsersMessage: kotlin.String,
    @SerialName(value = "myBody") @Required val myBody: kotlin.String,
    @SerialName(value = "likeSingular") @Required val likeSingular: kotlin.String,
    @SerialName(value = "likePlural") @Required val likePlural: kotlin.String,
    @SerialName(value = "reportSuccess") @Required val reportSuccess: kotlin.String,
    @SerialName(value = "option") @Required val option: kotlin.String,
    @SerialName(value = "deleteSuccess") @Required val deleteSuccess: kotlin.String,
    @SerialName(value = "deleteCancel") @Required val deleteCancel: kotlin.String,
    @SerialName(value = "reportCancel") @Required val reportCancel: kotlin.String,
    @SerialName(value = "photoTitle") @Required val photoTitle: kotlin.String,
    @SerialName(value = "peopleYouFollow") @Required val peopleYouFollow: kotlin.String,
    @SerialName(value = "findPeopleToFollow") @Required val findPeopleToFollow: kotlin.String,
    @SerialName(value = "skip") @Required val skip: kotlin.String,
    @SerialName(value = "suggestedProfiles") @Required val suggestedProfiles: kotlin.String,
    @SerialName(value = "tattoosOfTheDay") @Required val tattoosOfTheDay: kotlin.String,
    @SerialName(value = "coverStories") @Required val coverStories: kotlin.String,
    @SerialName(value = "discoverTattooStyles") @Required val discoverTattooStyles: kotlin.String
) 



