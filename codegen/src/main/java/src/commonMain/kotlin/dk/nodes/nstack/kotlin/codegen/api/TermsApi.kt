/**
* API
* This is the public API for nstack.io  Setup an application and use Application-Id and Rest-Api-Key
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package dk.nodes.nstack.kotlin.codegen.api


import org.openapitools.client.infrastructure.*
import io.ktor.client.request.forms.formData
import kotlinx.serialization.UnstableDefault
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.features.json.serializer.KotlinxSerializer
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.JsonConfiguration
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.internal.StringDescriptor

class TermsApi @UseExperimental(UnstableDefault::class) constructor(
        baseUrl: kotlin.String = "https://nstack-staging.vapor.cloud",
        httpClientEngine: HttpClientEngine? = null,
        serializer: KotlinxSerializer)
    : ApiClient(baseUrl, httpClientEngine, serializer) {

    @UseExperimental(UnstableDefault::class)
    constructor(
        baseUrl: kotlin.String = "https://nstack-staging.vapor.cloud",
        httpClientEngine: HttpClientEngine? = null,
        jsonConfiguration: JsonConfiguration = JsonConfiguration.Default)
    : this(baseUrl, httpClientEngine, KotlinxSerializer(Json(jsonConfiguration)))

    /**
    * Index
    * List all Terms  #### Request details Method: &#x60;GET&#x60;  URL: &#x60;api/v2/content/terms&#x60;  #### Headers &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_   #### Response codes(s) &#x60;200&#x60; OK  &#x60;404&#x60; Entity not found  &#x60;500&#x60; Internal server error _Please read response message_
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @param nminusMeta  
    * @param acceptMinusLanguage  
    * @return void
    */
    suspend fun index(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String, nminusMeta: kotlin.String, acceptMinusLanguage: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }
        nminusMeta?.apply { localVariableHeaders["N-Meta"] = this.toString() }
        acceptMinusLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/terms",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Indexversions
    * List all Version  #### Request details Method: &#x60;GET&#x60;  URL: &#x60;api/v2/content/terms/{slugOrId}/versions&#x60;  #### Headers &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Response codes(s) &#x60;200&#x60; OK  &#x60;404&#x60; Entity not found  &#x60;500&#x60; Internal server error _Please read response message_
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @param nminusMeta  
    * @param acceptMinusLanguage  
    * @return void
    */
    suspend fun indexversions(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String, nminusMeta: kotlin.String, acceptMinusLanguage: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }
        nminusMeta?.apply { localVariableHeaders["N-Meta"] = this.toString() }
        acceptMinusLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/v2/content/terms/some-terms-1/versions",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Newestversion
    * List all Version  #### Request details Method: &#x60;GET&#x60;  URL: &#x60;api/v2/content/terms/{slugOrId}/versions/newest&#x60;  #### Headers &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Response codes(s) &#x60;200&#x60; OK  &#x60;404&#x60; Entity not found  &#x60;500&#x60; Internal server error _Please read response message_
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @param nminusMeta  
    * @param acceptMinusLanguage  
    * @return void
    */
    suspend fun newestversion(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String, nminusMeta: kotlin.String, acceptMinusLanguage: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }
        nminusMeta?.apply { localVariableHeaders["N-Meta"] = this.toString() }
        acceptMinusLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/v2/content/terms/some-terms-1/versions/newest",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Showversion
    * List all Version  #### Request details Method: &#x60;GET&#x60;  URL: &#x60;api/v2/content/terms/versions/{id}&#x60;  #### Headers &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  &#x60;Accept-Language&#x60; (string) **optional** _Set this to get best fit locale_  #### Query params &#x60;guid&#x60; (string) **optional** _If you want &#x60;has_viewed&#x60; to be calculated_  #### Response codes(s) &#x60;200&#x60; OK  &#x60;404&#x60; Entity not found  &#x60;500&#x60; Internal server error _Please read response message_
    * @param guid  
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @param nminusMeta  
    * @param acceptMinusLanguage  
    * @return void
    */
    suspend fun showversion(guid: kotlin.String, xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String, nminusMeta: kotlin.String, acceptMinusLanguage: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        guid?.apply { localVariableQuery["guid"] = listOf("$guid") }

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }
        nminusMeta?.apply { localVariableHeaders["N-Meta"] = this.toString() }
        acceptMinusLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/v2/content/terms/versions/5",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * StoreView
    * Create a new View #### Request details Method: &#x60;POST&#x60;  URL: &#x60;/api/v2/content/terms/versions/{id}/views&#x60;  #### Headers &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Post params &#x60;term_version_id&#x60; (int) **required** _ID of Terms Version_  &#x60;guid&#x60; (string) **required** _GUID_  &#x60;identifier&#x60; (string) **required**  &#x60;locale&#x60; (string) **required**  #### Response codes(s) &#x60;200&#x60; OK  &#x60;412&#x60; Precondition failed _Please read response message_  &#x60;500&#x60; Internal server error _Please read response message_
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @param nminusMeta  
    * @param acceptMinusLanguage  
    * @param termVersionId  
    * @param guid  
    * @param identifier  
    * @param locale  
    * @return void
    */
    suspend fun storeView(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String, nminusMeta: kotlin.String, acceptMinusLanguage: kotlin.String, termVersionId: kotlin.Int, guid: kotlin.String, identifier: kotlin.String, locale: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            ParametersBuilder().also {
                termVersionId?.apply { it.append("term_version_id", termVersionId.toString()) }
                guid?.apply { it.append("guid", guid.toString()) }
                identifier?.apply { it.append("identifier", identifier.toString()) }
                locale?.apply { it.append("locale", locale.toString()) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }
        nminusMeta?.apply { localVariableHeaders["N-Meta"] = this.toString() }
        acceptMinusLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/v2/content/terms/versions/views",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    companion object {
        internal fun setMappers(serializer: KotlinxSerializer) {
        }
    }
}
