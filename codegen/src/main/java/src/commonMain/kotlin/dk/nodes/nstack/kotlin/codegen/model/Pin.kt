/**
* API
* This is the public API for nstack.io  Setup an application and use Application-Id and Rest-Api-Key
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package dk.nodes.nstack.kotlin.codegen.model


import kotlinx.serialization.*
import kotlinx.serialization.internal.CommonEnumSerializer
/**
 * 
 * @param pinPostSuccess 
 * @param pinPostError 
 * @param create 
 * @param image 
 * @param images 
 * @param editBoardTitle 
 * @param createNewBoard 
 * @param privateBoard 
 * @param boardTitlePlaceholder 
 * @param cancel 
 * @param save 
 * @param boardDeleteError 
 * @param edit 
 * @param delete 
 * @param deleteBoard 
 * @param deleteBoardMessage 
 * @param pin 
 * @param pins 
 * @param selectBoard 
 * @param addToBoard 
 * @param uploads 
 * @param pinners 
 * @param selectBoardEmpty 
 * @param selectBoardEmptySubtitle 
 * @param createBoard 
 * @param boards 
 * @param createNew 
 * @param saved 
 */
@Serializable
data class Pin (
    @SerialName(value = "pinPostSuccess") @Required val pinPostSuccess: kotlin.String,
    @SerialName(value = "pinPostError") @Required val pinPostError: kotlin.String,
    @SerialName(value = "create") @Required val create: kotlin.String,
    @SerialName(value = "image") @Required val image: kotlin.String,
    @SerialName(value = "images") @Required val images: kotlin.String,
    @SerialName(value = "editBoardTitle") @Required val editBoardTitle: kotlin.String,
    @SerialName(value = "createNewBoard") @Required val createNewBoard: kotlin.String,
    @SerialName(value = "privateBoard") @Required val privateBoard: kotlin.String,
    @SerialName(value = "boardTitlePlaceholder") @Required val boardTitlePlaceholder: kotlin.String,
    @SerialName(value = "cancel") @Required val cancel: kotlin.String,
    @SerialName(value = "save") @Required val save: kotlin.String,
    @SerialName(value = "boardDeleteError") @Required val boardDeleteError: kotlin.String,
    @SerialName(value = "edit") @Required val edit: kotlin.String,
    @SerialName(value = "delete") @Required val delete: kotlin.String,
    @SerialName(value = "deleteBoard") @Required val deleteBoard: kotlin.String,
    @SerialName(value = "deleteBoardMessage") @Required val deleteBoardMessage: kotlin.String,
    @SerialName(value = "pin") @Required val pin: kotlin.String,
    @SerialName(value = "pins") @Required val pins: kotlin.String,
    @SerialName(value = "selectBoard") @Required val selectBoard: kotlin.String,
    @SerialName(value = "addToBoard") @Required val addToBoard: kotlin.String,
    @SerialName(value = "uploads") @Required val uploads: kotlin.String,
    @SerialName(value = "pinners") @Required val pinners: kotlin.String,
    @SerialName(value = "selectBoardEmpty") @Required val selectBoardEmpty: kotlin.String,
    @SerialName(value = "selectBoardEmptySubtitle") @Required val selectBoardEmptySubtitle: kotlin.String,
    @SerialName(value = "createBoard") @Required val createBoard: kotlin.String,
    @SerialName(value = "boards") @Required val boards: kotlin.String,
    @SerialName(value = "createNew") @Required val createNew: kotlin.String,
    @SerialName(value = "saved") @Required val saved: kotlin.String
) 



