/**
* API
* This is the public API for nstack.io  Setup an application and use Application-Id and Rest-Api-Key
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package dk.nodes.nstack.kotlin.codegen.api

import dk.nodes.nstack.kotlin.codegen.model.Indexlanguages
import dk.nodes.nstack.kotlin.codegen.model.Indexresource
import dk.nodes.nstack.kotlin.codegen.model.Languagebestfit
import dk.nodes.nstack.kotlin.codegen.model.Showresource
import dk.nodes.nstack.kotlin.codegen.model.UntitledExample

import org.openapitools.client.infrastructure.*
import io.ktor.client.request.forms.formData
import kotlinx.serialization.UnstableDefault
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.features.json.serializer.KotlinxSerializer
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.JsonConfiguration
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.internal.StringDescriptor

class LocalizeApi @UseExperimental(UnstableDefault::class) constructor(
        baseUrl: kotlin.String = "https://nstack-staging.vapor.cloud",
        httpClientEngine: HttpClientEngine? = null,
        serializer: KotlinxSerializer)
    : ApiClient(baseUrl, httpClientEngine, serializer) {

    @UseExperimental(UnstableDefault::class)
    constructor(
        baseUrl: kotlin.String = "https://nstack-staging.vapor.cloud",
        httpClientEngine: HttpClientEngine? = null,
        jsonConfiguration: JsonConfiguration = JsonConfiguration.Default)
    : this(baseUrl, httpClientEngine, KotlinxSerializer(Json(jsonConfiguration)))

    /**
    * Deleteproposal
    * Delete a specified proposal  #### Request details  Method:    &#x60;DELETE&#x60;  URL:    &#x60;{{nstackUrl}}/api/v2/content/localize/proposals/{{proposalId}}&#x60;  #### Headers   &#x60;X-Application-Id&#x60;  &#x60;X-Rest-Api-Key&#x60;  #### Query params &#x60;guid&#x60; (string) **required**  #### URL Parameters &#x60;proposalId&#x60; (int) **required**  #### Response codes(s)  &#x60;200&#x60; OK  &#x60;404&#x60; Entity not found  &#x60;401&#x60; Invalid guid
    * @param guid  
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @return void
    */
    suspend fun deleteproposal(guid: kotlin.String, xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        guid?.apply { localVariableQuery["guid"] = listOf("$guid") }

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/api/v2/content/localize/proposals/9",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Indexlanguages
    * Get available languages for a platfom  #### Request details  Method:    &#x60;GET&#x60;  URL:    &#x60;/api/v1/content/localize/{platform-slug}/languages&#x60;  #### Headers   &#x60;X-Application-Id&#x60;  &#x60;X-Rest-Api-Key&#x60;  #### Query params &#x60;show_inactive_languages&#x60; (bool)  #### URL Parameters &#x60;platform-slug&#x60; (string) **required**  #### Response codes(s)  &#x60;200&#x60; OK  &#x60;404&#x60; Entity not found
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @return Indexlanguages
    */
    @Suppress("UNCHECKED_CAST")
    suspend fun indexlanguages(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String) : HttpResponse<Indexlanguages> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/v2/content/localize/mobile/languages",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Indexlanguages1
    * Get available languages for a platfom  #### Request details  Method:    &#x60;GET&#x60;  URL:    &#x60;/api/v1/translate/{platform-slug}/languages&#x60;  #### Headers   &#x60;X-Application-Id&#x60;  &#x60;X-Rest-Api-Key&#x60;  #### Query params &#x60;show_inactive_languages&#x60; (bool)  #### URL Parameters &#x60;platform-slug&#x60; (string) **required**  #### Response codes(s)  &#x60;200&#x60; OK 
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @return void
    */
    suspend fun indexlanguages1(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/v1/localize/mobile/languages",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Indexproposal
    * #### Request details  Method:    &#x60;GET&#x60;  URL:    &#x60;/api/v2/content/localize/proposals&#x60;  #### Post params &#x60;state&#x60; (string) **optional, default unaccepted** *Options: unaccepted, accepted, all*  &#x60;guid&#x60; (string) **optional** shows if the proposal is deletable or not for the specified guid  #### Response codes(s)  &#x60;200&#x60; OK
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @return void
    */
    suspend fun indexproposal(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/v2/content/localize/proposals",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Indexresource
    * #### Request details  Method:    &#x60;GET&#x60;  URL:    &#x60;/api/v2/content/localize/resources/platforms/{platformSlug}&#x60;  ### Url param  &#x60;platformSlug&#x60; (string) **required** *eg: mobile, backend, web*  #### Headers  &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_   ### Query  &#x60;last_updated&#x60; (date time, ISO8601) **optional** *eg: 2019-06-21T08%3A35%3A24%2B00%3A00*  - *Remember to url encode it*  - *Set timestamp from last app open (when localization has been synced), this will calculate which localizations should be updated*  &#x60;dev&#x60; (bool) **option, default false**  - *if true, bypass publishes and only use newest resource (set of key/values)*   #### Response codes(s)  &#x60;200&#x60; OK  &#x60;404&#x60; platform not found
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @return Indexresource
    */
    @Suppress("UNCHECKED_CAST")
    suspend fun indexresource(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String) : HttpResponse<Indexresource> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/v2/content/localize/resources/platforms/mobile",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Keys
    * #### Request details  Method:    &#x60;GET&#x60;  URL:    &#x60;/api/translate/{platform-slug}/keys&#x60;  #### Headers   &#x60;X-Application-Id&#x60;  &#x60;X-Rest-Api-Key&#x60;  &#x60;Accept-Language or X-Accept-Language&#x60;  #### Query params &#x60;section&#x60; (int/string) _id or slug_  &#x60;all&#x60; (bool) _true_  #### URL Params &#x60;platform-slug&#x60; (string) **required**  #### Response codes(s)  &#x60;200&#x60; OK 
    * @param all  
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @return void
    */
    suspend fun keys(all: kotlin.Boolean, xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        all?.apply { localVariableQuery["all"] = listOf("$all") }

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/v1/localize/mobile/keys",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Keys&amp;valuesforsection
    * Keys &amp; values for section
    * @param acceptMinusLanguage  
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @return UntitledExample
    */
    @Suppress("UNCHECKED_CAST")
    suspend fun keysvaluesforsection(acceptMinusLanguage: kotlin.String, xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String) : HttpResponse<UntitledExample> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        acceptMinusLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/v1/localize/backend/keys/default",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Languagebestfit
    * Get best fit language from accept-language header  #### Request details Method:    &#x60;GET&#x60;  URL:    &#x60;/api/v1/content/localize/{platform-slug}/languages/best_fit&#x60;  #### Headers  &#x60;X-Application-Id&#x60;  &#x60;X-Rest-Api-Key&#x60;  &#x60;Accept-Language or X-Accept-Language&#x60;  #### URL Parameters &#x60;platform-slug&#x60; (string) **required**  #### Response codes(s)  &#x60;200&#x60; OK  &#x60;404&#x60; Entity not found
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @return Languagebestfit
    */
    @Suppress("UNCHECKED_CAST")
    suspend fun languagebestfit(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String) : HttpResponse<Languagebestfit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/v2/content/localize/mobile/languages/best_fit",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Languagebestfit1
    * Get best fit language from accept-language header  #### Request details Method:    &#x60;GET&#x60;  URL:    &#x60;/api/v1/translate/{platform-slug}/languages/best_fit&#x60;  #### Headers  &#x60;X-Application-Id&#x60;  &#x60;X-Rest-Api-Key&#x60;  &#x60;Accept-Language or X-Accept-Language&#x60;  #### URL Parameters &#x60;platform-slug&#x60; (string) **required**  #### Response codes(s)  &#x60;200&#x60; OK 
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @return void
    */
    suspend fun languagebestfit1(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/v1/localize/mobile/languages/best_fit",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Showresource
    * #### Request details  Method:    &#x60;GET&#x60;  URL:    &#x60;/api/v2/content/localize/resources/{id}&#x60;  #### Response codes(s)  &#x60;200&#x60; OK  &#x60;404&#x60; Not found
    * @return Showresource
    */
    @Suppress("UNCHECKED_CAST")
    suspend fun showresource() : HttpResponse<Showresource> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/v2/content/localize/resources/44",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Storeproposal
    * #### Request details  Method:    &#x60;POST&#x60;  URL:    &#x60;/api/v2/content/localize/proposals&#x60;  #### Post params &#x60;key&#x60; (string) **required**   &#x60;section&#x60; (string) **required**   &#x60;value&#x60; (string) **required**   &#x60;locale&#x60; (string) **required**  *eg: da-DK, en-GB*  &#x60;platform&#x60; (string) **required** *eg: mobile, backend, web*  #### Response codes(s)  &#x60;201&#x60; Created  &#x60;412&#x60; Preconitions failed
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @param key  
    * @param value  
    * @param locale  
    * @param platform  
    * @param guid  
    * @param section  
    * @return void
    */
    suspend fun storeproposal(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String, key: kotlin.String, value: kotlin.String, locale: kotlin.String, platform: kotlin.String, guid: kotlin.String, section: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            ParametersBuilder().also {
                key?.apply { it.append("key", key.toString()) }
                value?.apply { it.append("value", value.toString()) }
                locale?.apply { it.append("locale", locale.toString()) }
                platform?.apply { it.append("platform", platform.toString()) }
                guid?.apply { it.append("guid", guid.toString()) }
                section?.apply { it.append("section", section.toString()) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/v2/content/localize/proposals",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    companion object {
        internal fun setMappers(serializer: KotlinxSerializer) {
        }
    }
}
