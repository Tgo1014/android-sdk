/**
* API
* This is the public API for nstack.io  Setup an application and use Application-Id and Rest-Api-Key
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package dk.nodes.nstack.kotlin.codegen.api


import org.openapitools.client.infrastructure.*
import io.ktor.client.request.forms.formData
import kotlinx.serialization.UnstableDefault
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.features.json.serializer.KotlinxSerializer
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.JsonConfiguration
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.internal.StringDescriptor

class FilesApi @UseExperimental(UnstableDefault::class) constructor(
        baseUrl: kotlin.String = "https://nstack-staging.vapor.cloud",
        httpClientEngine: HttpClientEngine? = null,
        serializer: KotlinxSerializer)
    : ApiClient(baseUrl, httpClientEngine, serializer) {

    @UseExperimental(UnstableDefault::class)
    constructor(
        baseUrl: kotlin.String = "https://nstack-staging.vapor.cloud",
        httpClientEngine: HttpClientEngine? = null,
        jsonConfiguration: JsonConfiguration = JsonConfiguration.Default)
    : this(baseUrl, httpClientEngine, KotlinxSerializer(Json(jsonConfiguration)))

    /**
    * Store
    * Store a file  #### Request details Method: &#x60;POST&#x60;  URL: &#x60;api/v2/content/files&#x60;  #### Headers &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Post params &#x60;name&#x60; (string) **required**   &#x60;tags&#x60; (string, comma seperated) **optional**   &#x60;gone_at&#x60; (date-time 2019-01-01 00:00:00) **optional**   &#x60;privacy&#x60; (string [public,public-cdn,private,private-password]) **required**   &#x60;file&#x60; (file, max 30mb) **required**   #### Response codes(s) &#x60;200&#x60; OK  &#x60;412&#x60; Validation error  &#x60;500&#x60; Internal server error _Please read response message_
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @param contentMinusType  
    * @param name  
    * @param tags  
    * @param goneAt  
    * @param file  
    * @param privacy  
    * @return void
    */
    suspend fun store(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String, contentMinusType: kotlin.String, name: kotlin.String, tags: kotlin.String, goneAt: kotlin.String, file: kotlin.String, privacy: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            ParametersBuilder().also {
                name?.apply { it.append("name", name.toString()) }
                tags?.apply { it.append("tags", tags.toString()) }
                goneAt?.apply { it.append("gone_at", goneAt.toString()) }
                file?.apply { it.append("file", file.toString()) }
                privacy?.apply { it.append("privacy", privacy.toString()) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }
        contentMinusType?.apply { localVariableHeaders["Content-Type"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/v2/content/files",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Storewithpath
    * Store a file with path  #### Request details Method: &#x60;POST&#x60;  URL: &#x60;api/v2/content/files/path&#x60;  #### Headers &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Post params &#x60;name&#x60; (string) **required**   &#x60;tags&#x60; (string, comma seperated) **optional**   &#x60;gone_at&#x60; (date-time 2019-01-01 00:00:00) **optional**   &#x60;privacy&#x60; (string [public,public-cdn,private,private-password]) **required**   &#x60;path&#x60; (string) **required**   &#x60;mime&#x60; (string) **required**   &#x60;size&#x60; (int) **required**   #### Response codes(s) &#x60;200&#x60; OK  &#x60;404&#x60; File in path not found  &#x60;409&#x60; Path should start with applicationId  &#x60;412&#x60; Validation error  &#x60;500&#x60; Internal server error _Please read response message_
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @param contentMinusType  
    * @param name  
    * @param tags  
    * @param goneAt  
    * @return void
    */
    suspend fun storewithpath(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String, contentMinusType: kotlin.String, name: kotlin.String, tags: kotlin.String, goneAt: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            ParametersBuilder().also {
                name?.apply { it.append("name", name.toString()) }
                tags?.apply { it.append("tags", tags.toString()) }
                goneAt?.apply { it.append("gone_at", goneAt.toString()) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }
        contentMinusType?.apply { localVariableHeaders["Content-Type"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/v1/content/files",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    companion object {
        internal fun setMappers(serializer: KotlinxSerializer) {
        }
    }
}
