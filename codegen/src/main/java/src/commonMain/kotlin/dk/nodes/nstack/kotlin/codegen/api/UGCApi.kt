/**
* API
* This is the public API for nstack.io  Setup an application and use Application-Id and Rest-Api-Key
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package dk.nodes.nstack.kotlin.codegen.api


import org.openapitools.client.infrastructure.*
import io.ktor.client.request.forms.formData
import kotlinx.serialization.UnstableDefault
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.features.json.serializer.KotlinxSerializer
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.JsonConfiguration
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.internal.StringDescriptor

class UGCApi @UseExperimental(UnstableDefault::class) constructor(
        baseUrl: kotlin.String = "https://nstack-staging.vapor.cloud",
        httpClientEngine: HttpClientEngine? = null,
        serializer: KotlinxSerializer)
    : ApiClient(baseUrl, httpClientEngine, serializer) {

    @UseExperimental(UnstableDefault::class)
    constructor(
        baseUrl: kotlin.String = "https://nstack-staging.vapor.cloud",
        httpClientEngine: HttpClientEngine? = null,
        jsonConfiguration: JsonConfiguration = JsonConfiguration.Default)
    : this(baseUrl, httpClientEngine, KotlinxSerializer(Json(jsonConfiguration)))

    /**
    * Feedback
    * #### Request details  Method:    &#x60;POST&#x60;  URL:    &#x60;/api/v2/ugc/feedbacks&#x60;  #### Headers   &#x60;X-Application-Id&#x60;  &#x60;X-Rest-Api-Key&#x60;  #### Response codes(s)  &#x60;200&#x60; OK  &#x60;412&#x60; Validation failed  #### Post params  &#x60;type&#x60; (string: feedback, bug) **optional, default is feedback**  &#x60;platform&#x60; (string: web, ios, android, unknown) **optional, default is unknown**  &#x60;os&#x60; (string) **optional**  &#x60;app_version&#x60; (string) **optional**  &#x60;device&#x60; (string) **optional**  &#x60;name&#x60; (string) **optional**  &#x60;email&#x60; (string) **optional**  &#x60;message&#x60; (string) **optional**  &#x60;image&#x60; (jpg,jpeg,png) **optional**  &#x60;meta&#x60; (array/dict, (full flexiable)) **optional**  &#x60;breadcrumbs&#x60; (array, {event (required): string, timestamp (required): Y-m-d H:i:s, meta (optional): array) **optional**
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @param breadcrumbsLeftSquareBracket0RightSquareBracketLeftSquareBracketMetaRightSquareBracket  
    * @param os  
    * @param device  
    * @param appVersion  
    * @param name  
    * @param email  
    * @param message  
    * @param image  
    * @param type  
    * @param platform  
    * @param metaLeftSquareBracketKeyRightSquareBracket  
    * @param breadcrumbsLeftSquareBracket0RightSquareBracketLeftSquareBracketEventRightSquareBracket  
    * @param breadcrumbsLeftSquareBracket0RightSquareBracketLeftSquareBracketTimestampRightSquareBracket  
    * @return void
    */
    suspend fun feedback(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String, breadcrumbsLeftSquareBracket0RightSquareBracketLeftSquareBracketMetaRightSquareBracket: kotlin.String, os: kotlin.String, device: kotlin.String, appVersion: kotlin.String, name: kotlin.String, email: kotlin.String, message: kotlin.String, image: kotlin.String, type: kotlin.String, platform: kotlin.String, metaLeftSquareBracketKeyRightSquareBracket: kotlin.String, breadcrumbsLeftSquareBracket0RightSquareBracketLeftSquareBracketEventRightSquareBracket: kotlin.String, breadcrumbsLeftSquareBracket0RightSquareBracketLeftSquareBracketTimestampRightSquareBracket: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            ParametersBuilder().also {
                breadcrumbsLeftSquareBracket0RightSquareBracketLeftSquareBracketMetaRightSquareBracket?.apply { it.append("breadcrumbs[0][meta]", breadcrumbsLeftSquareBracket0RightSquareBracketLeftSquareBracketMetaRightSquareBracket.toString()) }
                os?.apply { it.append("os", os.toString()) }
                device?.apply { it.append("device", device.toString()) }
                appVersion?.apply { it.append("app_version", appVersion.toString()) }
                name?.apply { it.append("name", name.toString()) }
                email?.apply { it.append("email", email.toString()) }
                message?.apply { it.append("message", message.toString()) }
                image?.apply { it.append("image", image.toString()) }
                type?.apply { it.append("type", type.toString()) }
                platform?.apply { it.append("platform", platform.toString()) }
                metaLeftSquareBracketKeyRightSquareBracket?.apply { it.append("meta[key]", metaLeftSquareBracketKeyRightSquareBracket.toString()) }
                breadcrumbsLeftSquareBracket0RightSquareBracketLeftSquareBracketEventRightSquareBracket?.apply { it.append("breadcrumbs[0][event]", breadcrumbsLeftSquareBracket0RightSquareBracketLeftSquareBracketEventRightSquareBracket.toString()) }
                breadcrumbsLeftSquareBracket0RightSquareBracketLeftSquareBracketTimestampRightSquareBracket?.apply { it.append("breadcrumbs[0][timestamp]", breadcrumbsLeftSquareBracket0RightSquareBracketLeftSquareBracketTimestampRightSquareBracket.toString()) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/v2/ugc/feedbacks",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * PostFeedback
    * #### Request details  Method:    &#x60;POST&#x60;  URL:    &#x60;/api/v1/ugc/feedbacks&#x60;  #### Headers   &#x60;X-Application-Id&#x60;  &#x60;X-Rest-Api-Key&#x60;  #### Response codes(s)  &#x60;200&#x60; OK  &#x60;412&#x60; Validation failed  #### Post params  &#x60;os&#x60; (string) **optional**  &#x60;app_version&#x60; (string) **optional**  &#x60;device&#x60; (string) **optional**  &#x60;name&#x60; (string) **optional**  &#x60;email&#x60; (string) **optional**  &#x60;message&#x60; (string) **optional**  &#x60;image&#x60; (jpg,jpeg,png) **optional**
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @param os  
    * @param device  
    * @param appVersion  
    * @param name  
    * @param email  
    * @param message  
    * @param image  
    * @return void
    */
    suspend fun postFeedback(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String, os: kotlin.String, device: kotlin.String, appVersion: kotlin.String, name: kotlin.String, email: kotlin.String, message: kotlin.String, image: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            ParametersBuilder().also {
                os?.apply { it.append("os", os.toString()) }
                device?.apply { it.append("device", device.toString()) }
                appVersion?.apply { it.append("app_version", appVersion.toString()) }
                name?.apply { it.append("name", name.toString()) }
                email?.apply { it.append("email", email.toString()) }
                message?.apply { it.append("message", message.toString()) }
                image?.apply { it.append("image", image.toString()) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/v1/ugc/feedbacks",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * PushLogs
    * #### Request details Method:    &#x60;POST&#x60;  URL:    &#x60;/api/v2/ugc/push-logs&#x60;  #### Headers  &#x60;X-Application-Id&#x60;  &#x60;X-Rest-Api-Key&#x60;  #### Response codes(s) &#x60;201&#x60; Created  &#x60;412&#x60; Validation failed  #### Post params &#x60;provider&#x60; (string) **required** (fx fcm, urban-airship)  &#x60;key&#x60; (string) **required** (App key in fcm / ua)  &#x60;type&#x60; (string) **required** (fx standard, freind-request, taxi-arrived etc)  &#x60;succeeded&#x60; (bool) **required** (Did push get sent?)  &#x60;request&#x60; (json) **optional** (Insert everything passed to provider)  &#x60;response&#x60; (json) **optional** (Insert everything received from provider)  &#x60;user_id&#x60; (int/string) **optional** (User id)  &#x60;relation_type&#x60; (string) **optional** (Fx Booking, Company etc)  &#x60;relation_id&#x60; (int) **optional** (Fx Id of Booking, id of Company etc)
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @param provider  
    * @param key  
    * @param type  
    * @param succeeded  
    * @param request  
    * @param response  
    * @param userId  
    * @return void
    */
    suspend fun pushLogs(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String, provider: kotlin.String, key: kotlin.String, type: kotlin.String, succeeded: kotlin.Boolean, request: kotlin.String, response: kotlin.String, userId: kotlin.Int) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            ParametersBuilder().also {
                provider?.apply { it.append("provider", provider.toString()) }
                key?.apply { it.append("key", key.toString()) }
                type?.apply { it.append("type", type.toString()) }
                succeeded?.apply { it.append("succeeded", succeeded.toString()) }
                request?.apply { it.append("request", request.toString()) }
                response?.apply { it.append("response", response.toString()) }
                userId?.apply { it.append("user_id", userId.toString()) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/v2/ugc/push-logs",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * PushLogs1
    * #### Request details Method:    &#x60;POST&#x60;  URL:    &#x60;/api/v1/ugc/push-logs&#x60;  #### Headers  &#x60;X-Application-Id&#x60;  &#x60;X-Rest-Api-Key&#x60;  #### Response codes(s) &#x60;201&#x60; Created  &#x60;412&#x60; Validation failed  #### Post params &#x60;provider&#x60; (string) **required** (fx fcm, urban-airship)  &#x60;key&#x60; (string) **required** (App key in fcm / ua)  &#x60;type&#x60; (string) **required** (fx standard, freind-request, taxi-arrived etc)  &#x60;succeeded&#x60; (bool) **required** (Did push get sent?)  &#x60;request&#x60; (json) **optional** (Insert everything passed to provider)  &#x60;response&#x60; (json) **optional** (Insert everything received from provider)  &#x60;user_id&#x60; (int/string) **optional** (User id)  &#x60;relation_type&#x60; (string) **optional** (Fx Booking, Company etc)  &#x60;relation_id&#x60; (int) **optional** (Fx Id of Booking, id of Company etc)
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @param provider  
    * @param key  
    * @param type  
    * @param succeeded  
    * @param request  
    * @param response  
    * @param userId  
    * @return void
    */
    suspend fun pushLogs1(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String, provider: kotlin.String, key: kotlin.String, type: kotlin.String, succeeded: kotlin.Boolean, request: kotlin.String, response: kotlin.String, userId: kotlin.Int) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            ParametersBuilder().also {
                provider?.apply { it.append("provider", provider.toString()) }
                key?.apply { it.append("key", key.toString()) }
                type?.apply { it.append("type", type.toString()) }
                succeeded?.apply { it.append("succeeded", succeeded.toString()) }
                request?.apply { it.append("request", request.toString()) }
                response?.apply { it.append("response", response.toString()) }
                userId?.apply { it.append("user_id", userId.toString()) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/v1/ugc/push-logs",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Result
    * #### Request details Method:    &#x60;POST&#x60;  URL:    &#x60;/api/v2/ugc/feedbacks&#x60;  #### Headers  &#x60;X-Application-Id&#x60;  &#x60;X-Rest-Api-Key&#x60;  #### Response codes(s) &#x60;200&#x60; OK  &#x60;412&#x60; Validation failed  #### Post params &#x60;key&#x60; (string) **required**  &#x60;user&#x60; (string) **required**  &#x60;answer&#x60; (string) **required**  &#x60;points&#x60; (int) **required**  &#x60;tag&#x60; (string) **required**
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @param key  
    * @param user  
    * @param answer  
    * @param points  
    * @param tag  
    * @return void
    */
    suspend fun result(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String, key: kotlin.String, user: kotlin.String, answer: kotlin.Array<kotlin.Int>, points: kotlin.Int, tag: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            ParametersBuilder().also {
                key?.apply { it.append("key", key.toString()) }
                user?.apply { it.append("user", user.toString()) }
                answer?.apply { it.append("answer", answer.toString()) }
                points?.apply { it.append("points", points.toString()) }
                tag?.apply { it.append("tag", tag.toString()) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/v2/ugc/results",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Result1
    * #### Request details Method:    &#x60;POST&#x60;  URL:    &#x60;/api/v1/ugc/feedbacks&#x60;  #### Headers  &#x60;X-Application-Id&#x60;  &#x60;X-Rest-Api-Key&#x60;  #### Response codes(s) &#x60;200&#x60; OK  &#x60;412&#x60; Validation failed  #### Post params &#x60;key&#x60; (string) **required**  &#x60;user&#x60; (string) **required**  &#x60;answer&#x60; (string) **required**  &#x60;points&#x60; (int) **required**  &#x60;tag&#x60; (string) **required** 
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @param key  
    * @param user  
    * @param answer  
    * @param points  
    * @param tag  
    * @return void
    */
    suspend fun result1(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String, key: kotlin.String, user: kotlin.String, answer: kotlin.Array<kotlin.Int>, points: kotlin.Int, tag: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            ParametersBuilder().also {
                key?.apply { it.append("key", key.toString()) }
                user?.apply { it.append("user", user.toString()) }
                answer?.apply { it.append("answer", answer.toString()) }
                points?.apply { it.append("points", points.toString()) }
                tag?.apply { it.append("tag", tag.toString()) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/v1/ugc/results",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    companion object {
        internal fun setMappers(serializer: KotlinxSerializer) {
        }
    }
}
