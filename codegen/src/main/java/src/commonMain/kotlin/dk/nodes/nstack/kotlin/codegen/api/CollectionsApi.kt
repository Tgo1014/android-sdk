/**
* API
* This is the public API for nstack.io  Setup an application and use Application-Id and Rest-Api-Key
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package dk.nodes.nstack.kotlin.codegen.api


import org.openapitools.client.infrastructure.*
import io.ktor.client.request.forms.formData
import kotlinx.serialization.UnstableDefault
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.features.json.serializer.KotlinxSerializer
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.JsonConfiguration
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.internal.StringDescriptor

class CollectionsApi @UseExperimental(UnstableDefault::class) constructor(
        baseUrl: kotlin.String = "https://nstack-staging.vapor.cloud",
        httpClientEngine: HttpClientEngine? = null,
        serializer: KotlinxSerializer)
    : ApiClient(baseUrl, httpClientEngine, serializer) {

    @UseExperimental(UnstableDefault::class)
    constructor(
        baseUrl: kotlin.String = "https://nstack-staging.vapor.cloud",
        httpClientEngine: HttpClientEngine? = null,
        jsonConfiguration: JsonConfiguration = JsonConfiguration.Default)
    : this(baseUrl, httpClientEngine, KotlinxSerializer(Json(jsonConfiguration)))

    /**
    * Createitem
    * Create a new item to a array type collection #### Request details Method: &#x60;POST&#x60;  URL: &#x60;api/v2/content/responses/{collection_id}/items&#x60;  #### Headers &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters &#x60;collection_id&#x60; (int) **required** _ID of content collection_  #### Post params  &#x60;All required keys&#x60;  #### Response codes(s) &#x60;200&#x60; OK  &#x60;401&#x60; Collectio does not have write access for api  &#x60;404&#x60; Entity not found  &#x60;412&#x60; Precondition failed _Please read response message_  &#x60;500&#x60; Internal server error _Please read response message_
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @param k0int  
    * @param key1string  
    * @param key2float  
    * @param key3wysiwygsim  
    * @param key4asset  
    * @param key5boolean  
    * @param key6wysiwygadvanced  
    * @return void
    */
    suspend fun createitem(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String, k0int: kotlin.Int, key1string: kotlin.String, key2float: kotlin.Double, key3wysiwygsim: kotlin.String, key4asset: kotlin.String, key5boolean: kotlin.Boolean, key6wysiwygadvanced: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            ParametersBuilder().also {
                k0int?.apply { it.append("k0int", k0int.toString()) }
                key1string?.apply { it.append("key1string", key1string.toString()) }
                key2float?.apply { it.append("key2float", key2float.toString()) }
                key3wysiwygsim?.apply { it.append("key3wysiwygsim", key3wysiwygsim.toString()) }
                key4asset?.apply { it.append("key4asset", key4asset.toString()) }
                key5boolean?.apply { it.append("key5boolean", key5boolean.toString()) }
                key6wysiwygadvanced?.apply { it.append("key6wysiwygadvanced", key6wysiwygadvanced.toString()) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/v2/content/collections/1/items",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Createitem1
    * Create a new item to a array type collection #### Request details Method: &#x60;POST&#x60;  URL: &#x60;api/v1/content/responses/{collection_id}/items&#x60;  #### Headers &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters &#x60;collection_id&#x60; (int) **required** _ID of content collection_  #### Post params  &#x60;All required keys&#x60;  #### Response codes(s) &#x60;200&#x60; OK  &#x60;401&#x60; Collectio does not have write access for api   &#x60;412&#x60; Precondition failed _Please read response message_  &#x60;445&#x60; Entity not found  &#x60;500&#x60; Internal server error _Please read response message_
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @param k0int  
    * @param key1string  
    * @param key2float  
    * @param key3wysiwygsim  
    * @param key4asset  
    * @param key5boolean  
    * @param key6wysiwygadvanced  
    * @return void
    */
    suspend fun createitem1(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String, k0int: kotlin.Int, key1string: kotlin.String, key2float: kotlin.Double, key3wysiwygsim: kotlin.String, key4asset: kotlin.String, key5boolean: kotlin.Boolean, key6wysiwygadvanced: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            ParametersBuilder().also {
                k0int?.apply { it.append("k0int", k0int.toString()) }
                key1string?.apply { it.append("key1string", key1string.toString()) }
                key2float?.apply { it.append("key2float", key2float.toString()) }
                key3wysiwygsim?.apply { it.append("key3wysiwygsim", key3wysiwygsim.toString()) }
                key4asset?.apply { it.append("key4asset", key4asset.toString()) }
                key5boolean?.apply { it.append("key5boolean", key5boolean.toString()) }
                key6wysiwygadvanced?.apply { it.append("key6wysiwygadvanced", key6wysiwygadvanced.toString()) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/v1/content/collections/1/items",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Deleteitem
    * Create a new item to a array type collection #### Request details Method: &#x60;DELETE&#x60;  URL: &#x60;api/v2/content/responses/{collection_id}/items{item_id}&#x60;  #### Headers &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters &#x60;collection_id&#x60; (int) **required** _ID of content collection_  &#x60;item_id&#x60; (int) **required** _ID of content collection item_  #### Response codes(s) &#x60;200&#x60; OK  &#x60;401&#x60; Collection does not have write access for api   &#x60;404&#x60; Entity not found  &#x60;500&#x60; Internal server error _Please read response message_
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @return void
    */
    suspend fun deleteitem(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/api/v2/content/collections/1/items/13",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Deleteitem1
    * Create a new item to a array type collection #### Request details Method: &#x60;DELETE&#x60;  URL: &#x60;api/v1/content/responses/{collection_id}/items{item_id}&#x60;  #### Headers &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters &#x60;collection_id&#x60; (int) **required** _ID of content collection_  &#x60;item_id&#x60; (int) **required** _ID of content collection item_  #### Response codes(s) &#x60;200&#x60; OK  &#x60;401&#x60; Collection does not have write access for api  &#x60;445&#x60; Entity not found  &#x60;500&#x60; Internal server error _Please read response message_
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @return void
    */
    suspend fun deleteitem1(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/api/v1/content/collections/1/items/13",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Update
    * Create a new item to a array type collection #### Request details Method: &#x60;POST&#x60;  URL: &#x60;api/v2/content/responses/{collection_id}/items&#x60;  #### Headers &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters &#x60;collection_id&#x60; (int) **required** _ID of content collection_  #### Post params  &#x60;All required keys&#x60;  #### Response codes(s) &#x60;200&#x60; OK  &#x60;401&#x60; Collectio does not have write access for api   &#x60;404&#x60; Entity not found  &#x60;412&#x60; Precondition failed _Please read response message_  &#x60;500&#x60; Internal server error _Please read response message_
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @param contentMinusType  
    * @param k0int  
    * @param key1string  
    * @param key2float  
    * @param key3wysiwygsim  
    * @param key4asset  
    * @param key5boolean  
    * @param key6wysiwygadvanced  
    * @return void
    */
    suspend fun update(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String, contentMinusType: kotlin.String, k0int: kotlin.Int, key1string: kotlin.String, key2float: kotlin.Double, key3wysiwygsim: kotlin.String, key4asset: kotlin.String, key5boolean: kotlin.Boolean, key6wysiwygadvanced: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            ParametersBuilder().also {
                k0int?.apply { it.append("k0int", k0int.toString()) }
                key1string?.apply { it.append("key1string", key1string.toString()) }
                key2float?.apply { it.append("key2float", key2float.toString()) }
                key3wysiwygsim?.apply { it.append("key3wysiwygsim", key3wysiwygsim.toString()) }
                key4asset?.apply { it.append("key4asset", key4asset.toString()) }
                key5boolean?.apply { it.append("key5boolean", key5boolean.toString()) }
                key6wysiwygadvanced?.apply { it.append("key6wysiwygadvanced", key6wysiwygadvanced.toString()) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }
        contentMinusType?.apply { localVariableHeaders["Content-Type"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/v2/content/collections/1/items/14/update",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Update1
    * Create a new item to a array type collection #### Request details Method: &#x60;POST&#x60;  URL: &#x60;api/v1/content/responses/{collection_id}/items&#x60;  #### Headers &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters &#x60;collection_id&#x60; (int) **required** _ID of content collection_  #### Post params  &#x60;All required keys&#x60;  #### Response codes(s) &#x60;200&#x60; OK  &#x60;401&#x60; Collectio does not have write access for api   &#x60;412&#x60; Precondition failed _Please read response message_  &#x60;445&#x60; Entity not found  &#x60;500&#x60; Internal server error _Please read response message_
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @param contentMinusType  
    * @param k0int  
    * @param key1string  
    * @param key2float  
    * @param key3wysiwygsim  
    * @param key4asset  
    * @param key5boolean  
    * @param key6wysiwygadvanced  
    * @return void
    */
    suspend fun update1(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String, contentMinusType: kotlin.String, k0int: kotlin.Int, key1string: kotlin.String, key2float: kotlin.Double, key3wysiwygsim: kotlin.String, key4asset: kotlin.String, key5boolean: kotlin.Boolean, key6wysiwygadvanced: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            ParametersBuilder().also {
                k0int?.apply { it.append("k0int", k0int.toString()) }
                key1string?.apply { it.append("key1string", key1string.toString()) }
                key2float?.apply { it.append("key2float", key2float.toString()) }
                key3wysiwygsim?.apply { it.append("key3wysiwygsim", key3wysiwygsim.toString()) }
                key4asset?.apply { it.append("key4asset", key4asset.toString()) }
                key5boolean?.apply { it.append("key5boolean", key5boolean.toString()) }
                key6wysiwygadvanced?.apply { it.append("key6wysiwygadvanced", key6wysiwygadvanced.toString()) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }
        contentMinusType?.apply { localVariableHeaders["Content-Type"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/v1/content/collections/1/items/14/update",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * View
    * Get a default type of content collection  #### Request details Method: &#x60;GET&#x60;  URL: &#x60;api/v2/content/responses/{collection_id}&#x60;  #### Headers &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters &#x60;collection_id&#x60; (int) **required** _ID of content collection_  #### Response codes(s) &#x60;200&#x60; OK  &#x60;404&#x60; Entity not found  &#x60;500&#x60; Internal server error _Please read response message_
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @return void
    */
    suspend fun view(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/v2/content/collections/1",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * View1
    * Get a default type of content collection  #### Request details Method: &#x60;GET&#x60;  URL: &#x60;api/v1/content/responses/{collection_id}&#x60;  #### Headers &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters &#x60;collection_id&#x60; (int) **required** _ID of content collection_  #### Response codes(s) &#x60;200&#x60; OK  &#x60;445&#x60; Entity not found  &#x60;500&#x60; Internal server error _Please read response message_
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @return void
    */
    suspend fun view1(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/v1/content/collections/1",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Viewitem
    * Create a new item to a array type collection #### Request details Method: &#x60;GET&#x60;  URL: &#x60;api/v2/content/responses/{collection_id}/items{item_id}&#x60;  #### Headers &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters &#x60;collection_id&#x60; (int) **required** _ID of content collection_  &#x60;item_id&#x60; (int) **required** _ID of content collection item_  #### Response codes(s) &#x60;200&#x60; OK  &#x60;401&#x60; Collection does not have write access for api  &#x60;445&#x60; Entity not found
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @return void
    */
    suspend fun viewitem(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/v2/content/collections/1/items/5",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Viewitem1
    * Create a new item to a array type collection #### Request details Method: &#x60;GET&#x60;  URL: &#x60;api/v1/content/responses/{collection_id}/items{item_id}&#x60;  #### Headers &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters &#x60;collection_id&#x60; (int) **required** _ID of content collection_  &#x60;item_id&#x60; (int) **required** _ID of content collection item_  #### Response codes(s) &#x60;200&#x60; OK  &#x60;401&#x60; Collection does not have write access for api  &#x60;445&#x60; Entity not found 
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @return void
    */
    suspend fun viewitem1(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/v1/content/collections/1/items/5",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    companion object {
        internal fun setMappers(serializer: KotlinxSerializer) {
        }
    }
}
