/**
* API
* This is the public API for nstack.io  Setup an application and use Application-Id and Rest-Api-Key
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package dk.nodes.nstack.kotlin.codegen.api


import org.openapitools.client.infrastructure.*
import io.ktor.client.request.forms.formData
import kotlinx.serialization.UnstableDefault
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.features.json.serializer.KotlinxSerializer
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.JsonConfiguration
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.internal.StringDescriptor

class TimeZonesApi @UseExperimental(UnstableDefault::class) constructor(
        baseUrl: kotlin.String = "https://nstack-staging.vapor.cloud",
        httpClientEngine: HttpClientEngine? = null,
        serializer: KotlinxSerializer)
    : ApiClient(baseUrl, httpClientEngine, serializer) {

    @UseExperimental(UnstableDefault::class)
    constructor(
        baseUrl: kotlin.String = "https://nstack-staging.vapor.cloud",
        httpClientEngine: HttpClientEngine? = null,
        jsonConfiguration: JsonConfiguration = JsonConfiguration.Default)
    : this(baseUrl, httpClientEngine, KotlinxSerializer(Json(jsonConfiguration)))

    /**
    * GetIndex1123
    * Retrieve a list of valid timesones on Earth  #### Request details Method:    &#x60;GET&#x60;  URL:    &#x60;/api/v1/geographic/timezones&#x60;  #### Headers  &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Query parameters (filters) &#x60;limit&#x60; (int) _Eg: [/api/geographic/timezones?limit&#x3D;1] Default limit is 1000_  &#x60;order&#x60; (string) _Eg: [/api/geographic/timezones?order&#x3D;name:desc]_  &#x60;search&#x60; (string) _[Eg: /api/geographic/timezones?search&#x3D;Europe/Andorra]_  &#x60;fields&#x60; (string) _[Eg: /api/geographic/timezones?fields&#x3D;name,abbr]_  #### Response codes(s)  &#x60;200&#x60; OK  &#x60;412&#x60; Precondition failed _Invalid filters_ 
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @return void
    */
    suspend fun getIndex1123(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/v1/geographic/time_zones",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * GetIndex123
    * Retrieve a list of valid timesones on Earth  #### Request details Method:    &#x60;GET&#x60;  URL:    &#x60;/api/v2/geographic/timezones&#x60;  #### Headers  &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Query parameters (filters) &#x60;limit&#x60; (int) _Eg: [/api/geographic/timezones?limit&#x3D;1] Default limit is 1000_  &#x60;order&#x60; (string) _Eg: [/api/geographic/timezones?order&#x3D;name:desc]_  &#x60;search&#x60; (string) _[Eg: /api/geographic/timezones?search&#x3D;Europe/Andorra]_  &#x60;fields&#x60; (string) _[Eg: /api/geographic/timezones?fields&#x3D;name,abbr]_  #### Response codes(s)  &#x60;200&#x60; OK  &#x60;412&#x60; Precondition failed _Invalid filters_
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @return void
    */
    suspend fun getIndex123(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/v2/geographic/time_zones",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * GetShow1123
    * Retrieve details of a timezone  #### Request details Method:    &#x60;GET&#x60;  URL:    &#x60;/api/v1/geographic/timezones/{id}&#x60;  #### Headers  &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Response codes(s)  &#x60;200&#x60; OK  &#x60;445&#x60; Entity not found
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @return void
    */
    suspend fun getShow1123(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/v1/geographic/time_zones/1",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * GetShow123456
    * Retrieve details of a timezone  #### Request details Method:    &#x60;GET&#x60;  URL:    &#x60;/api/v2/geographic/timezones/{id}&#x60;  #### Headers  &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Response codes(s)  &#x60;200&#x60; OK  &#x60;445&#x60; Entity not found
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @return void
    */
    suspend fun getShow123456(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/v2/geographic/time_zones/1",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Showbylatlng
    * Retrieve details of a nearest timezone by lat lng  #### Request details Method:    &#x60;GET&#x60;  URL:    &#x60;/api/v2/geographic/timezones/by_lat_lng&#x60;  #### Headers  &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Query parameters &#x60;lat_lng&#x60; (double,double) _Eg: 55.1231,12.1231_  #### Response codes(s)  &#x60;200&#x60; OK  &#x60;412&#x60; Preconditions Failed (Missing ?lat_lng&#x3D;)  &#x60;404&#x60; Entity not found
    * @param latLng  
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @return void
    */
    suspend fun showbylatlng(latLng: kotlin.String, xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        latLng?.apply { localVariableQuery["lat_lng"] = listOf("$latLng") }

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/v2/geographic/time_zones/by_lat_lng",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Showbylatlng1
    * Retrieve details of a nearest timezone by lat lng  #### Request details Method:    &#x60;GET&#x60;  URL:    &#x60;/api/v1/geographic/timezones/by_lat_lng&#x60;  #### Headers  &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Query parameters &#x60;lat_lng&#x60; (double,double) _Eg: 55.1231,12.1231_  #### Response codes(s)  &#x60;200&#x60; OK  &#x60;412&#x60; Preconditions Failed (Missing ?lat_lng&#x3D;)  &#x60;445&#x60; Entity not found
    * @param latLng  
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @return void
    */
    suspend fun showbylatlng1(latLng: kotlin.String, xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        latLng?.apply { localVariableQuery["lat_lng"] = listOf("$latLng") }

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/v1/geographic/time_zones/by_lat_lng",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    companion object {
        internal fun setMappers(serializer: KotlinxSerializer) {
        }
    }
}
