/**
* API
* This is the public API for nstack.io  Setup an application and use Application-Id and Rest-Api-Key
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package dk.nodes.nstack.kotlin.codegen.api

import dk.nodes.nstack.kotlin.codegen.model.MarkAsSeenResponse
import dk.nodes.nstack.kotlin.codegen.model.Messages

import org.openapitools.client.infrastructure.*
import io.ktor.client.request.forms.formData
import kotlinx.serialization.UnstableDefault
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.features.json.serializer.KotlinxSerializer
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.JsonConfiguration
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.internal.StringDescriptor

class MessagesApi @UseExperimental(UnstableDefault::class) constructor(
        baseUrl: kotlin.String = "https://nstack-staging.vapor.cloud",
        httpClientEngine: HttpClientEngine? = null,
        serializer: KotlinxSerializer)
    : ApiClient(baseUrl, httpClientEngine, serializer) {

    @UseExperimental(UnstableDefault::class)
    constructor(
        baseUrl: kotlin.String = "https://nstack-staging.vapor.cloud",
        httpClientEngine: HttpClientEngine? = null,
        jsonConfiguration: JsonConfiguration = JsonConfiguration.Default)
    : this(baseUrl, httpClientEngine, KotlinxSerializer(Json(jsonConfiguration)))

    /**
    * Markasseen
    * Register a view update  #### Request details Method: &#x60;POST&#x60;  URL: &#x60;/api/v2/notify/updates/views&#x60;  #### Headers  &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Parameters &#x60;guid&#x60; (int) **required** _[?]_  &#x60;message_id&#x60; **required** _[?]_  #### Response codes &#x60;200&#x60; OK  &#x60;412&#x60; Precondition failed
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @param guid  
    * @param messageId  
    * @return MarkAsSeenResponse
    */
    @Suppress("UNCHECKED_CAST")
    suspend fun markasseen(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String, guid: kotlin.Int, messageId: kotlin.Int) : HttpResponse<MarkAsSeenResponse> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            ParametersBuilder().also {
                guid?.apply { it.append("guid", guid.toString()) }
                messageId?.apply { it.append("message_id", messageId.toString()) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/v2/notify/messages/views",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Messages
    * Get message  #### Request details Method:    &#x60;GET&#x60;  URL:    &#x60;/api/v1/notify/messages&#x60;  #### Headers  &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Query parameters &#x60;platform&#x60; (string) **required** _[\&quot;ios\&quot;, \&quot;android\&quot;, \&quot;windows\&quot;, \&quot;web\&quot;]_   #### Response codes &#x60;200&#x60; OK  &#x60;412&#x60; Precondition failed
    * @param platform  
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @return Messages
    */
    @Suppress("UNCHECKED_CAST")
    suspend fun messages(platform: kotlin.String, xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String) : HttpResponse<Messages> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        platform?.apply { localVariableQuery["platform"] = listOf("$platform") }

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/v2/notify/messages",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Messages1
    * Get message  #### Request details Method:    &#x60;GET&#x60;  URL:    &#x60;/api/v1/notify/messages&#x60;  #### Headers  &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Query parameters &#x60;platform&#x60; (string) **required** _[\&quot;ios\&quot;, \&quot;android\&quot;, \&quot;windows\&quot;, \&quot;web\&quot;]_   #### Response codes &#x60;200&#x60; OK  &#x60;412&#x60; Precondition failed
    * @param platform  
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @return Messages
    */
    @Suppress("UNCHECKED_CAST")
    suspend fun messages1(platform: kotlin.String, xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String) : HttpResponse<Messages> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            io.ktor.client.utils.EmptyContent

        val localVariableQuery = mutableMapOf<String, List<String>>()
        platform?.apply { localVariableQuery["platform"] = listOf("$platform") }

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/api/v1/notify/messages",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * Viewmessage
    * Register a view update  #### Request details Method: &#x60;POST&#x60;  URL: &#x60;/api/v1/notify/updates/views&#x60;  #### Headers  &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Parameters &#x60;guid&#x60; (int) **required** _[?]_  &#x60;message_id&#x60; **required** _[?]_  #### Response codes &#x60;200&#x60; OK  &#x60;412&#x60; Precondition failed
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @param guid  
    * @param messageId  
    * @return void
    */
    suspend fun viewmessage(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String, guid: kotlin.Int, messageId: kotlin.Int) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            ParametersBuilder().also {
                guid?.apply { it.append("guid", guid.toString()) }
                messageId?.apply { it.append("message_id", messageId.toString()) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/v1/notify/messages/views",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    companion object {
        internal fun setMappers(serializer: KotlinxSerializer) {
        }
    }
}
