/**
* API
* This is the public API for nstack.io  Setup an application and use Application-Id and Rest-Api-Key
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package dk.nodes.nstack.kotlin.codegen.model


import kotlinx.serialization.*
import kotlinx.serialization.internal.CommonEnumSerializer
/**
 * 
 * @param titleProfile 
 * @param posts 
 * @param followers 
 * @param following 
 * @param noPhotos 
 * @param doesNotExist 
 * @param follow 
 * @param isFollowing 
 * @param onlyMyTattoos 
 * @param thisUserDoesntExist 
 * @param myTattoos 
 * @param someonesActivity 
 * @param report 
 * @param reportMessage 
 * @param reportSuccess 
 * @param reportTitle 
 * @param userAlreadyReportedTitle 
 * @param userNotFoundMessage 
 * @param tattoosOnMyBody 
 * @param unfollowUser 
 * @param unfollowUserMessage 
 * @param unfollowUnfollowButton 
 * @param unfollowCancelButton 
 * @param uploadedByMe 
 * @param myCollection 
 * @param bio 
 * @param tabMyCollection 
 * @param tabBoards 
 * @param tabUploads 
 * @param noBoards 
 * @param emptyBoards 
 * @param emptyBoardsSubtitle 
 * @param noBoardsSubtitle 
 * @param noMyCollection 
 * @param noMyCollectionSubtitle 
 * @param addTattoos 
 * @param emptyMyCollection 
 * @param emptyMyCollectionSubtitle 
 * @param noUploads 
 * @param noUploadsSubtitle 
 * @param emptyUploads 
 * @param emptyUploadsSubtitle 
 * @param uploadIdeas 
 */
@Serializable
data class User (
    @SerialName(value = "titleProfile") @Required val titleProfile: kotlin.String,
    @SerialName(value = "posts") @Required val posts: kotlin.String,
    @SerialName(value = "followers") @Required val followers: kotlin.String,
    @SerialName(value = "following") @Required val following: kotlin.String,
    @SerialName(value = "noPhotos") @Required val noPhotos: kotlin.String,
    @SerialName(value = "doesNotExist") @Required val doesNotExist: kotlin.String,
    @SerialName(value = "follow") @Required val follow: kotlin.String,
    @SerialName(value = "isFollowing") @Required val isFollowing: kotlin.String,
    @SerialName(value = "onlyMyTattoos") @Required val onlyMyTattoos: kotlin.String,
    @SerialName(value = "thisUserDoesntExist") @Required val thisUserDoesntExist: kotlin.String,
    @SerialName(value = "myTattoos") @Required val myTattoos: kotlin.String,
    @SerialName(value = "someonesActivity") @Required val someonesActivity: kotlin.String,
    @SerialName(value = "report") @Required val report: kotlin.String,
    @SerialName(value = "reportMessage") @Required val reportMessage: kotlin.String,
    @SerialName(value = "reportSuccess") @Required val reportSuccess: kotlin.String,
    @SerialName(value = "reportTitle") @Required val reportTitle: kotlin.String,
    @SerialName(value = "userAlreadyReportedTitle") @Required val userAlreadyReportedTitle: kotlin.String,
    @SerialName(value = "userNotFoundMessage") @Required val userNotFoundMessage: kotlin.String,
    @SerialName(value = "tattoosOnMyBody") @Required val tattoosOnMyBody: kotlin.String,
    @SerialName(value = "unfollowUser") @Required val unfollowUser: kotlin.String,
    @SerialName(value = "unfollowUserMessage") @Required val unfollowUserMessage: kotlin.String,
    @SerialName(value = "unfollowUnfollowButton") @Required val unfollowUnfollowButton: kotlin.String,
    @SerialName(value = "unfollowCancelButton") @Required val unfollowCancelButton: kotlin.String,
    @SerialName(value = "uploadedByMe") @Required val uploadedByMe: kotlin.String,
    @SerialName(value = "myCollection") @Required val myCollection: kotlin.String,
    @SerialName(value = "bio") @Required val bio: kotlin.String,
    @SerialName(value = "tabMyCollection") @Required val tabMyCollection: kotlin.String,
    @SerialName(value = "tabBoards") @Required val tabBoards: kotlin.String,
    @SerialName(value = "tabUploads") @Required val tabUploads: kotlin.String,
    @SerialName(value = "noBoards") @Required val noBoards: kotlin.String,
    @SerialName(value = "emptyBoards") @Required val emptyBoards: kotlin.String,
    @SerialName(value = "emptyBoardsSubtitle") @Required val emptyBoardsSubtitle: kotlin.String,
    @SerialName(value = "noBoardsSubtitle") @Required val noBoardsSubtitle: kotlin.String,
    @SerialName(value = "noMyCollection") @Required val noMyCollection: kotlin.String,
    @SerialName(value = "noMyCollectionSubtitle") @Required val noMyCollectionSubtitle: kotlin.String,
    @SerialName(value = "addTattoos") @Required val addTattoos: kotlin.String,
    @SerialName(value = "emptyMyCollection") @Required val emptyMyCollection: kotlin.String,
    @SerialName(value = "emptyMyCollectionSubtitle") @Required val emptyMyCollectionSubtitle: kotlin.String,
    @SerialName(value = "noUploads") @Required val noUploads: kotlin.String,
    @SerialName(value = "noUploadsSubtitle") @Required val noUploadsSubtitle: kotlin.String,
    @SerialName(value = "emptyUploads") @Required val emptyUploads: kotlin.String,
    @SerialName(value = "emptyUploadsSubtitle") @Required val emptyUploadsSubtitle: kotlin.String,
    @SerialName(value = "uploadIdeas") @Required val uploadIdeas: kotlin.String
) 



