/**
* API
* This is the public API for nstack.io  Setup an application and use Application-Id and Rest-Api-Key
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package dk.nodes.nstack.kotlin.codegen.api

import dk.nodes.nstack.kotlin.codegen.model.AppopenV2

import org.openapitools.client.infrastructure.*
import io.ktor.client.request.forms.formData
import kotlinx.serialization.UnstableDefault
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.features.json.serializer.KotlinxSerializer
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.JsonConfiguration
import io.ktor.http.ParametersBuilder
import kotlinx.serialization.*
import kotlinx.serialization.internal.StringDescriptor

class AppOpenApi @UseExperimental(UnstableDefault::class) constructor(
        baseUrl: kotlin.String = "https://nstack-staging.vapor.cloud",
        httpClientEngine: HttpClientEngine? = null,
        serializer: KotlinxSerializer)
    : ApiClient(baseUrl, httpClientEngine, serializer) {

    @UseExperimental(UnstableDefault::class)
    constructor(
        baseUrl: kotlin.String = "https://nstack-staging.vapor.cloud",
        httpClientEngine: HttpClientEngine? = null,
        jsonConfiguration: JsonConfiguration = JsonConfiguration.Default)
    : this(baseUrl, httpClientEngine, KotlinxSerializer(Json(jsonConfiguration)))

    /**
    * Appopen
    * Retrieve a list of valid continents on Earth  #### Request details Method:    &#x60;GET&#x60;  URL:    &#x60;/api/v2/open&#x60;  #### Headers  &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  &#x60;N-Meta&#x60; (string) **required** _eg: android;production;1.2.3;4.4;Samsung S7_  &#x60;Accept-Language&#x60; (string) **Optional** _eg: da-DK_  ### Form-data  &#x60;platform&#x60; (string) **required** eg: ios/android/web  &#x60;guid&#x60; (string) **required** &#x60;unique generated string&#x60; *eg: 9bc4b39a-0af5-4b54-a5a5-88ad334dbd4b*  &#x60;version&#x60; (string) **required if not web** &#x60;format: xxx.yyy.zzz&#x60; *eg: 2.0.0 / 212.01.1*  - *Current version of application*  &#x60;old_version&#x60; (string) **required if not web** &#x60;format: xxx.yyy.zzz&#x60; *eg: 2.0.0 / 212.01.1*  - *Previous version of application (Auto update can have happened)*  &#x60;last_updated&#x60; (date time, ISO8601) **optional** *eg: 2019-06-15T14:29:50+00:00*  - *Set timestamp from last app open (when localization has been synced), this will calculate which localizations should be updated*  &#x60;dev&#x60; (bool) **option, default false**  - *if true, bypass publishes and only use newest resource (set of key/values)*   &#x60;test&#x60; (bool) **option, default false**  - *if true, used the app version from \&quot;test env\&quot;    #### Response codes(s) &#x60;200&#x60; OK
    * @param test  
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @param acceptMinusLanguage  
    * @param nminusMeta  
    * @param platform  
    * @param guid  
    * @param version  
    * @param lastUpdated  
    * @param dev  
    * @return AppopenV2
    */
    @Suppress("UNCHECKED_CAST")
    suspend fun appopen(test: kotlin.Boolean, xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String, acceptMinusLanguage: kotlin.String, nminusMeta: kotlin.String, platform: kotlin.String, guid: kotlin.String, version: kotlin.String, lastUpdated: kotlin.String, dev: kotlin.Boolean) : HttpResponse<AppopenV2> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            ParametersBuilder().also {
                platform?.apply { it.append("platform", platform.toString()) }
                guid?.apply { it.append("guid", guid.toString()) }
                version?.apply { it.append("version", version.toString()) }
                lastUpdated?.apply { it.append("last_updated", lastUpdated.toString()) }
                dev?.apply { it.append("dev", dev.toString()) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()
        test?.apply { localVariableQuery["test"] = listOf("$test") }

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }
        acceptMinusLanguage?.apply { localVariableHeaders["Accept-Language"] = this.toString() }
        nminusMeta?.apply { localVariableHeaders["N-Meta"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/v2/open",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }


    /**
    * PostAppopen
    * Registers an app-open.  _Deprecated, please use V2_  #### Request details Method: &#x60;POST&#x60;  URL: &#x60;/api/v1/open&#x60;  #### Headers &#x60;X-Application-Id&#x60; (string) **required** _Application ID from [NStack](https://nstack.io)_  &#x60;X-Rest-Api-Key&#x60; (string) **required** _Rest API key from [NStack](https://nstack.io)_  &#x60;Accept-Language&#x60; (string) **Optional** _eg: da-DK_  #### Parameters &#x60;platform&#x60; (string) **required** _The platform the app was opened from e.g. [\&quot;ios\&quot;, \&quot;android\&quot;, \&quot;windows\&quot;, \&quot;web\&quot;]_  &#x60;guid&#x60; (string) **required** _[?]_  &#x60;version&#x60; (string) **required** _[?]_  &#x60;old_version&#x60; (string) _[?]_  &#x60;last_updated&#x60; (string) _A string parsable by php&#39;s [strtotime()](http://php.net/manual/en/function.strtotime.php)-function_  &#x60;test&#x60; (bool) _Enable test mode, false equals production (only works for version control)_  #### Response codes(s) &#x60;201&#x60; Created  &#x60;412&#x60; Precondition failed  &#x60;445&#x60; Entity not found  &#x60;500&#x60; Internal server error _Please read response message_
    * @param xminusApplicationMinusId  
    * @param xminusRestMinusApiMinusKey  
    * @param platform  
    * @param guid  
    * @param version  
    * @param oldVersion  
    * @param lastUpdated  
    * @return void
    */
    suspend fun postAppopen(xminusApplicationMinusId: kotlin.String, xminusRestMinusApiMinusKey: kotlin.String, platform: kotlin.String, guid: kotlin.String, version: kotlin.String, oldVersion: kotlin.String, lastUpdated: kotlin.String) : HttpResponse<Unit> {

        val localVariableAuthNames = listOf<String>()

        val localVariableBody = 
            ParametersBuilder().also {
                platform?.apply { it.append("platform", platform.toString()) }
                guid?.apply { it.append("guid", guid.toString()) }
                version?.apply { it.append("version", version.toString()) }
                oldVersion?.apply { it.append("old_version", oldVersion.toString()) }
                lastUpdated?.apply { it.append("last_updated", lastUpdated.toString()) }
            }.build()

        val localVariableQuery = mutableMapOf<String, List<String>>()

        val localVariableHeaders = mutableMapOf<String, String>()
        xminusApplicationMinusId?.apply { localVariableHeaders["X-Application-Id"] = this.toString() }
        xminusRestMinusApiMinusKey?.apply { localVariableHeaders["X-Rest-Api-Key"] = this.toString() }

        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/api/v1/open",
            query = localVariableQuery,
            headers = localVariableHeaders
        )

        return urlEncodedFormRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
        ).wrap()
    }



    companion object {
        internal fun setMappers(serializer: KotlinxSerializer) {
        }
    }
}
