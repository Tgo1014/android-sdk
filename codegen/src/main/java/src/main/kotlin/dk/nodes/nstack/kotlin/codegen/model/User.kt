/**
* API
* This is the public API for nstack.io  Setup an application and use Application-Id and Rest-Api-Key
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package dk.nodes.nstack.kotlin.codegen.model


import com.squareup.moshi.Json
/**
 * 
 * @param titleProfile 
 * @param posts 
 * @param followers 
 * @param following 
 * @param noPhotos 
 * @param doesNotExist 
 * @param follow 
 * @param isFollowing 
 * @param onlyMyTattoos 
 * @param thisUserDoesntExist 
 * @param myTattoos 
 * @param someonesActivity 
 * @param report 
 * @param reportMessage 
 * @param reportSuccess 
 * @param reportTitle 
 * @param userAlreadyReportedTitle 
 * @param userNotFoundMessage 
 * @param tattoosOnMyBody 
 * @param unfollowUser 
 * @param unfollowUserMessage 
 * @param unfollowUnfollowButton 
 * @param unfollowCancelButton 
 * @param uploadedByMe 
 * @param myCollection 
 * @param bio 
 * @param tabMyCollection 
 * @param tabBoards 
 * @param tabUploads 
 * @param noBoards 
 * @param emptyBoards 
 * @param emptyBoardsSubtitle 
 * @param noBoardsSubtitle 
 * @param noMyCollection 
 * @param noMyCollectionSubtitle 
 * @param addTattoos 
 * @param emptyMyCollection 
 * @param emptyMyCollectionSubtitle 
 * @param noUploads 
 * @param noUploadsSubtitle 
 * @param emptyUploads 
 * @param emptyUploadsSubtitle 
 * @param uploadIdeas 
 */

data class User (
    @Json(name = "titleProfile")
    val titleProfile: kotlin.String,
    @Json(name = "posts")
    val posts: kotlin.String,
    @Json(name = "followers")
    val followers: kotlin.String,
    @Json(name = "following")
    val following: kotlin.String,
    @Json(name = "noPhotos")
    val noPhotos: kotlin.String,
    @Json(name = "doesNotExist")
    val doesNotExist: kotlin.String,
    @Json(name = "follow")
    val follow: kotlin.String,
    @Json(name = "isFollowing")
    val isFollowing: kotlin.String,
    @Json(name = "onlyMyTattoos")
    val onlyMyTattoos: kotlin.String,
    @Json(name = "thisUserDoesntExist")
    val thisUserDoesntExist: kotlin.String,
    @Json(name = "myTattoos")
    val myTattoos: kotlin.String,
    @Json(name = "someonesActivity")
    val someonesActivity: kotlin.String,
    @Json(name = "report")
    val report: kotlin.String,
    @Json(name = "reportMessage")
    val reportMessage: kotlin.String,
    @Json(name = "reportSuccess")
    val reportSuccess: kotlin.String,
    @Json(name = "reportTitle")
    val reportTitle: kotlin.String,
    @Json(name = "userAlreadyReportedTitle")
    val userAlreadyReportedTitle: kotlin.String,
    @Json(name = "userNotFoundMessage")
    val userNotFoundMessage: kotlin.String,
    @Json(name = "tattoosOnMyBody")
    val tattoosOnMyBody: kotlin.String,
    @Json(name = "unfollowUser")
    val unfollowUser: kotlin.String,
    @Json(name = "unfollowUserMessage")
    val unfollowUserMessage: kotlin.String,
    @Json(name = "unfollowUnfollowButton")
    val unfollowUnfollowButton: kotlin.String,
    @Json(name = "unfollowCancelButton")
    val unfollowCancelButton: kotlin.String,
    @Json(name = "uploadedByMe")
    val uploadedByMe: kotlin.String,
    @Json(name = "myCollection")
    val myCollection: kotlin.String,
    @Json(name = "bio")
    val bio: kotlin.String,
    @Json(name = "tabMyCollection")
    val tabMyCollection: kotlin.String,
    @Json(name = "tabBoards")
    val tabBoards: kotlin.String,
    @Json(name = "tabUploads")
    val tabUploads: kotlin.String,
    @Json(name = "noBoards")
    val noBoards: kotlin.String,
    @Json(name = "emptyBoards")
    val emptyBoards: kotlin.String,
    @Json(name = "emptyBoardsSubtitle")
    val emptyBoardsSubtitle: kotlin.String,
    @Json(name = "noBoardsSubtitle")
    val noBoardsSubtitle: kotlin.String,
    @Json(name = "noMyCollection")
    val noMyCollection: kotlin.String,
    @Json(name = "noMyCollectionSubtitle")
    val noMyCollectionSubtitle: kotlin.String,
    @Json(name = "addTattoos")
    val addTattoos: kotlin.String,
    @Json(name = "emptyMyCollection")
    val emptyMyCollection: kotlin.String,
    @Json(name = "emptyMyCollectionSubtitle")
    val emptyMyCollectionSubtitle: kotlin.String,
    @Json(name = "noUploads")
    val noUploads: kotlin.String,
    @Json(name = "noUploadsSubtitle")
    val noUploadsSubtitle: kotlin.String,
    @Json(name = "emptyUploads")
    val emptyUploads: kotlin.String,
    @Json(name = "emptyUploadsSubtitle")
    val emptyUploadsSubtitle: kotlin.String,
    @Json(name = "uploadIdeas")
    val uploadIdeas: kotlin.String
) 



