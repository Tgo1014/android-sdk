/**
* API
* This is the public API for nstack.io  Setup an application and use Application-Id and Rest-Api-Key
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package dk.nodes.nstack.kotlin.codegen.model


import com.squareup.moshi.Json
/**
 * 
 * @param invalidOrMissingFields 
 * @param emailAlreadyInUse 
 * @param title 
 * @param facebookTokenVerificationFailed 
 * @param twitterTokenVerificationFailed 
 * @param unknownError 
 * @param incorrectPassword 
 * @param newPasswordTooShort 
 * @param loginNeeded 
 * @param loginButton 
 * @param loginNeededTitle 
 * @param connectionErrorTitle 
 * @param connectionError 
 * @param tryAgain 
 * @param cancel 
 * @param giveCameraAccessText 
 * @param giveLibraryAccessText 
 * @param giveAccessButton 
 * @param noCameraAccessText 
 * @param openSettingsButton 
 * @param noLibraryAccessText 
 * @param canNotSendEmailMessage 
 * @param invalidToken 
 * @param couldntFindUser 
 * @param tokenExpired 
 * @param invalidAcceptHeader 
 * @param couldntFindEntity 
 * @param twitterLoginErrorTitle 
 * @param couldntFindImage 
 * @param invalidTokenTitle 
 * @param noCameraAccessTextAndroid 
 * @param noLibraryAccessTextAndroid 
 * @param cameraConnectionError 
 * @param loginCanceledTitle 
 * @param loginCanceledMessage 
 * @param loginFailedTitle 
 * @param loginFailedMessage 
 * @param shopsCannotPinPosts 
 * @param invalidImage 
 * @param invalidShopName 
 * @param fieldRequired 
 * @param passwordErrorCharacter 
 * @param passwordErrorTooShort 
 * @param passwordErrorIncorrect 
 * @param invalidImageTitle 
 * @param failedToLoadContent 
 * @param checkIfYouHaveAnInternetConnection 
 * @param pullToRefresh 
 * @param noCameraPermissionTitle 
 * @param noCameraPermissionMessage 
 */

data class Errors (
    @Json(name = "invalidOrMissingFields")
    val invalidOrMissingFields: kotlin.String,
    @Json(name = "emailAlreadyInUse")
    val emailAlreadyInUse: kotlin.String,
    @Json(name = "title")
    val title: kotlin.String,
    @Json(name = "facebookTokenVerificationFailed")
    val facebookTokenVerificationFailed: kotlin.String,
    @Json(name = "twitterTokenVerificationFailed")
    val twitterTokenVerificationFailed: kotlin.String,
    @Json(name = "unknownError")
    val unknownError: kotlin.String,
    @Json(name = "incorrectPassword")
    val incorrectPassword: kotlin.String,
    @Json(name = "newPasswordTooShort")
    val newPasswordTooShort: kotlin.String,
    @Json(name = "loginNeeded")
    val loginNeeded: kotlin.String,
    @Json(name = "loginButton")
    val loginButton: kotlin.String,
    @Json(name = "loginNeededTitle")
    val loginNeededTitle: kotlin.String,
    @Json(name = "connectionErrorTitle")
    val connectionErrorTitle: kotlin.String,
    @Json(name = "connectionError")
    val connectionError: kotlin.String,
    @Json(name = "tryAgain")
    val tryAgain: kotlin.String,
    @Json(name = "cancel")
    val cancel: kotlin.String,
    @Json(name = "giveCameraAccessText")
    val giveCameraAccessText: kotlin.String,
    @Json(name = "giveLibraryAccessText")
    val giveLibraryAccessText: kotlin.String,
    @Json(name = "giveAccessButton")
    val giveAccessButton: kotlin.String,
    @Json(name = "noCameraAccessText")
    val noCameraAccessText: kotlin.String,
    @Json(name = "openSettingsButton")
    val openSettingsButton: kotlin.String,
    @Json(name = "noLibraryAccessText")
    val noLibraryAccessText: kotlin.String,
    @Json(name = "canNotSendEmailMessage")
    val canNotSendEmailMessage: kotlin.String,
    @Json(name = "invalidToken")
    val invalidToken: kotlin.String,
    @Json(name = "couldntFindUser")
    val couldntFindUser: kotlin.String,
    @Json(name = "tokenExpired")
    val tokenExpired: kotlin.String,
    @Json(name = "invalidAcceptHeader")
    val invalidAcceptHeader: kotlin.String,
    @Json(name = "couldntFindEntity")
    val couldntFindEntity: kotlin.String,
    @Json(name = "twitterLoginErrorTitle")
    val twitterLoginErrorTitle: kotlin.String,
    @Json(name = "couldntFindImage")
    val couldntFindImage: kotlin.String,
    @Json(name = "invalidTokenTitle")
    val invalidTokenTitle: kotlin.String,
    @Json(name = "noCameraAccessTextAndroid")
    val noCameraAccessTextAndroid: kotlin.String,
    @Json(name = "noLibraryAccessTextAndroid")
    val noLibraryAccessTextAndroid: kotlin.String,
    @Json(name = "cameraConnectionError")
    val cameraConnectionError: kotlin.String,
    @Json(name = "loginCanceledTitle")
    val loginCanceledTitle: kotlin.String,
    @Json(name = "loginCanceledMessage")
    val loginCanceledMessage: kotlin.String,
    @Json(name = "loginFailedTitle")
    val loginFailedTitle: kotlin.String,
    @Json(name = "loginFailedMessage")
    val loginFailedMessage: kotlin.String,
    @Json(name = "shopsCannotPinPosts")
    val shopsCannotPinPosts: kotlin.String,
    @Json(name = "invalidImage")
    val invalidImage: kotlin.String,
    @Json(name = "invalidShopName")
    val invalidShopName: kotlin.String,
    @Json(name = "fieldRequired")
    val fieldRequired: kotlin.String,
    @Json(name = "passwordErrorCharacter")
    val passwordErrorCharacter: kotlin.String,
    @Json(name = "passwordErrorTooShort")
    val passwordErrorTooShort: kotlin.String,
    @Json(name = "passwordErrorIncorrect")
    val passwordErrorIncorrect: kotlin.String,
    @Json(name = "invalidImageTitle")
    val invalidImageTitle: kotlin.String,
    @Json(name = "failedToLoadContent")
    val failedToLoadContent: kotlin.String,
    @Json(name = "checkIfYouHaveAnInternetConnection")
    val checkIfYouHaveAnInternetConnection: kotlin.String,
    @Json(name = "pullToRefresh")
    val pullToRefresh: kotlin.String,
    @Json(name = "noCameraPermissionTitle")
    val noCameraPermissionTitle: kotlin.String,
    @Json(name = "noCameraPermissionMessage")
    val noCameraPermissionMessage: kotlin.String
) 



