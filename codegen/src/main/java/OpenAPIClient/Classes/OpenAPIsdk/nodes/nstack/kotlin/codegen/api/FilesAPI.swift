//
// FilesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class FilesAPI {
    /**
     Store
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter contentType: (header)  
     - parameter name: (form)  
     - parameter tags: (form)  
     - parameter goneAt: (form)  
     - parameter file: (form)  
     - parameter privacy: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func store(xApplicationId: String, xRestApiKey: String, contentType: String, name: String, tags: String, goneAt: String, file: String, privacy: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        storeWithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey, contentType: contentType, name: name, tags: tags, goneAt: goneAt, file: file, privacy: privacy).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Store
     - POST /api/v2/content/files
     - Store a file  #### Request details Method: `POST`  URL: `api/v2/content/files`  #### Headers `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Post params `name` (string) **required**   `tags` (string, comma seperated) **optional**   `gone_at` (date-time 2019-01-01 00:00:00) **optional**   `privacy` (string [public,public-cdn,private,private-password]) **required**   `file` (file, max 30mb) **required**   #### Response codes(s) `200` OK  `412` Validation error  `500` Internal server error _Please read response message_
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter contentType: (header)  
     - parameter name: (form)  
     - parameter tags: (form)  
     - parameter goneAt: (form)  
     - parameter file: (form)  
     - parameter privacy: (form)  
     - returns: RequestBuilder<Void> 
     */
    open class func storeWithRequestBuilder(xApplicationId: String, xRestApiKey: String, contentType: String, name: String, tags: String, goneAt: String, file: String, privacy: String) -> RequestBuilder<Void> {
        let path = "/api/v2/content/files"
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "name": name.encodeToJSON(),
            "tags": tags.encodeToJSON(),
            "gone_at": goneAt.encodeToJSON(),
            "file": file.encodeToJSON(),
            "privacy": privacy.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON(),
            "Content-Type": contentType.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Storewithpath
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter contentType: (header)  
     - parameter name: (form)  
     - parameter tags: (form)  
     - parameter goneAt: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func storewithpath(xApplicationId: String, xRestApiKey: String, contentType: String, name: String, tags: String, goneAt: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        storewithpathWithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey, contentType: contentType, name: name, tags: tags, goneAt: goneAt).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Storewithpath
     - POST /api/v1/content/files
     - Store a file with path  #### Request details Method: `POST`  URL: `api/v2/content/files/path`  #### Headers `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Post params `name` (string) **required**   `tags` (string, comma seperated) **optional**   `gone_at` (date-time 2019-01-01 00:00:00) **optional**   `privacy` (string [public,public-cdn,private,private-password]) **required**   `path` (string) **required**   `mime` (string) **required**   `size` (int) **required**   #### Response codes(s) `200` OK  `404` File in path not found  `409` Path should start with applicationId  `412` Validation error  `500` Internal server error _Please read response message_
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter contentType: (header)  
     - parameter name: (form)  
     - parameter tags: (form)  
     - parameter goneAt: (form)  
     - returns: RequestBuilder<Void> 
     */
    open class func storewithpathWithRequestBuilder(xApplicationId: String, xRestApiKey: String, contentType: String, name: String, tags: String, goneAt: String) -> RequestBuilder<Void> {
        let path = "/api/v1/content/files"
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "name": name.encodeToJSON(),
            "tags": tags.encodeToJSON(),
            "gone_at": goneAt.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON(),
            "Content-Type": contentType.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
