//
// AppOpenAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class AppOpenAPI {
    /**
     Appopen
     
     - parameter test: (query)  
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter acceptLanguage: (header)  
     - parameter nMeta: (header)  
     - parameter platform: (form)  
     - parameter guid: (form)  
     - parameter version: (form)  
     - parameter lastUpdated: (form)  
     - parameter dev: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appopen(test: Bool, xApplicationId: String, xRestApiKey: String, acceptLanguage: String, nMeta: String, platform: String, guid: String, version: String, lastUpdated: String, dev: Bool, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AppopenV2?,_ error: Error?) -> Void)) {
        appopenWithRequestBuilder(test: test, xApplicationId: xApplicationId, xRestApiKey: xRestApiKey, acceptLanguage: acceptLanguage, nMeta: nMeta, platform: platform, guid: guid, version: version, lastUpdated: lastUpdated, dev: dev).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Appopen
     - POST /api/v2/open
     - Retrieve a list of valid continents on Earth  #### Request details Method:    `GET`  URL:    `/api/v2/open`  #### Headers  `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  `N-Meta` (string) **required** _eg: android;production;1.2.3;4.4;Samsung S7_  `Accept-Language` (string) **Optional** _eg: da-DK_  ### Form-data  `platform` (string) **required** eg: ios/android/web  `guid` (string) **required** `unique generated string` *eg: 9bc4b39a-0af5-4b54-a5a5-88ad334dbd4b*  `version` (string) **required if not web** `format: xxx.yyy.zzz` *eg: 2.0.0 / 212.01.1*  - *Current version of application*  `old_version` (string) **required if not web** `format: xxx.yyy.zzz` *eg: 2.0.0 / 212.01.1*  - *Previous version of application (Auto update can have happened)*  `last_updated` (date time, ISO8601) **optional** *eg: 2019-06-15T14:29:50+00:00*  - *Set timestamp from last app open (when localization has been synced), this will calculate which localizations should be updated*  `dev` (bool) **option, default false**  - *if true, bypass publishes and only use newest resource (set of key/values)*   `test` (bool) **option, default false**  - *if true, used the app version from \"test env\"    #### Response codes(s) `200` OK
     - responseHeaders: [Server(String), Transfer-Encoding(String), Connection(String), Cache-Control(String), Date(String)]
     - parameter test: (query)  
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter acceptLanguage: (header)  
     - parameter nMeta: (header)  
     - parameter platform: (form)  
     - parameter guid: (form)  
     - parameter version: (form)  
     - parameter lastUpdated: (form)  
     - parameter dev: (form)  
     - returns: RequestBuilder<AppopenV2> 
     */
    open class func appopenWithRequestBuilder(test: Bool, xApplicationId: String, xRestApiKey: String, acceptLanguage: String, nMeta: String, platform: String, guid: String, version: String, lastUpdated: String, dev: Bool) -> RequestBuilder<AppopenV2> {
        let path = "/api/v2/open"
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "platform": platform.encodeToJSON(),
            "guid": guid.encodeToJSON(),
            "version": version.encodeToJSON(),
            "last_updated": lastUpdated.encodeToJSON(),
            "dev": dev.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "test": test.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON(),
            "Accept-Language": acceptLanguage.encodeToJSON(),
            "N-Meta": nMeta.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AppopenV2>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     PostAppopen
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter platform: (form)  
     - parameter guid: (form)  
     - parameter version: (form)  
     - parameter oldVersion: (form)  
     - parameter lastUpdated: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAppopen(xApplicationId: String, xRestApiKey: String, platform: String, guid: String, version: String, oldVersion: String, lastUpdated: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postAppopenWithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey, platform: platform, guid: guid, version: version, oldVersion: oldVersion, lastUpdated: lastUpdated).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     PostAppopen
     - POST /api/v1/open
     - Registers an app-open.  _Deprecated, please use V2_  #### Request details Method: `POST`  URL: `/api/v1/open`  #### Headers `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  `Accept-Language` (string) **Optional** _eg: da-DK_  #### Parameters `platform` (string) **required** _The platform the app was opened from e.g. [\"ios\", \"android\", \"windows\", \"web\"]_  `guid` (string) **required** _[?]_  `version` (string) **required** _[?]_  `old_version` (string) _[?]_  `last_updated` (string) _A string parsable by php's [strtotime()](http://php.net/manual/en/function.strtotime.php)-function_  `test` (bool) _Enable test mode, false equals production (only works for version control)_  #### Response codes(s) `201` Created  `412` Precondition failed  `445` Entity not found  `500` Internal server error _Please read response message_
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter platform: (form)  
     - parameter guid: (form)  
     - parameter version: (form)  
     - parameter oldVersion: (form)  
     - parameter lastUpdated: (form)  
     - returns: RequestBuilder<Void> 
     */
    open class func postAppopenWithRequestBuilder(xApplicationId: String, xRestApiKey: String, platform: String, guid: String, version: String, oldVersion: String, lastUpdated: String) -> RequestBuilder<Void> {
        let path = "/api/v1/open"
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "platform": platform.encodeToJSON(),
            "guid": guid.encodeToJSON(),
            "version": version.encodeToJSON(),
            "old_version": oldVersion.encodeToJSON(),
            "last_updated": lastUpdated.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
