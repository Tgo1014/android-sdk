//
// AdminAPIAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class AdminAPIAPI {
    /**
     Search
     
     - parameter q: (query)  
     - parameter authorization: (header)  
     - parameter contentType: (header)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func search(q: String, authorization: String, contentType: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AppopenV2?,_ error: Error?) -> Void)) {
        searchWithRequestBuilder(q: q, authorization: authorization, contentType: contentType).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search
     - GET /admin/search/company-applications
     - Retrieve a list of valid continents on Earth  #### Request details Method:    `GET`  URL:    `/admin/search/company-applications`  #### Headers  `Authorization` (string) **required** _Token_  #### Response codes(s) `200` OK
     - responseHeaders: [Server(String), Transfer-Encoding(String), Connection(String), Cache-Control(String), Date(String)]
     - parameter q: (query)  
     - parameter authorization: (header)  
     - parameter contentType: (header)  
     - returns: RequestBuilder<AppopenV2> 
     */
    open class func searchWithRequestBuilder(q: String, authorization: String, contentType: String) -> RequestBuilder<AppopenV2> {
        let path = "/admin/search/company-applications"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": q.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
            "Content-Type": contentType.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AppopenV2>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
