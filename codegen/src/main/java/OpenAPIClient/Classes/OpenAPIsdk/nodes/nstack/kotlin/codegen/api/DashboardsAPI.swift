//
// DashboardsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class DashboardsAPI {
    /**
     Dashboard
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter contentType: (header)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func dashboard(xApplicationId: String, xRestApiKey: String, contentType: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        dashboardWithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey, contentType: contentType).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Dashboard
     - GET /api/v2/content/dashboards/DAS-ad21e084-ae03-4486-a5ec-d837dfc56fd2
     - Get Dashboard  #### Request details Method: `GET`  URL: `api/v2/content/dashboards/{key}`  #### URL Parameters `key` (string) **required**  `mode` (string) **Optional**   - standard (default), using cache data  - fresh, force using fresh data  - test, fake data  #### Response codes(s) `200` OK  `404` Entity not found
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter contentType: (header)  
     - returns: RequestBuilder<Void> 
     */
    open class func dashboardWithRequestBuilder(xApplicationId: String, xRestApiKey: String, contentType: String) -> RequestBuilder<Void> {
        let path = "/api/v2/content/dashboards/DAS-ad21e084-ae03-4486-a5ec-d837dfc56fd2"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON(),
            "Content-Type": contentType.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Visualization
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter contentType: (header)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func visualization(xApplicationId: String, xRestApiKey: String, contentType: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        visualizationWithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey, contentType: contentType).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Visualization
     - GET /api/v2/content/dashboards/visualizations/visualization-5d0dbc254bc83
     - Get visualization  #### Request details Method: `GET`  URL: `api/v2/content/dashboards/visualizations/{key}`  #### URL Parameters `key` (string) **required**  ### Query parameters  `mode` (string) **Optional**   - standard (default), using cache data  - fresh, force using fresh data  - test, fake data  #### Response codes(s) `200` OK  `404` Entity not found
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter contentType: (header)  
     - returns: RequestBuilder<Void> 
     */
    open class func visualizationWithRequestBuilder(xApplicationId: String, xRestApiKey: String, contentType: String) -> RequestBuilder<Void> {
        let path = "/api/v2/content/dashboards/visualizations/visualization-5d0dbc254bc83"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON(),
            "Content-Type": contentType.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
