//
// CollectionsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class CollectionsAPI {
    /**
     Createitem
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter k0int: (form)  
     - parameter key1string: (form)  
     - parameter key2float: (form)  
     - parameter key3wysiwygsim: (form)  
     - parameter key4asset: (form)  
     - parameter key5boolean: (form)  
     - parameter key6wysiwygadvanced: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createitem(xApplicationId: String, xRestApiKey: String, k0int: Int, key1string: String, key2float: Double, key3wysiwygsim: String, key4asset: String, key5boolean: Bool, key6wysiwygadvanced: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createitemWithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey, k0int: k0int, key1string: key1string, key2float: key2float, key3wysiwygsim: key3wysiwygsim, key4asset: key4asset, key5boolean: key5boolean, key6wysiwygadvanced: key6wysiwygadvanced).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Createitem
     - POST /api/v2/content/collections/1/items
     - Create a new item to a array type collection #### Request details Method: `POST`  URL: `api/v2/content/responses/{collection_id}/items`  #### Headers `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters `collection_id` (int) **required** _ID of content collection_  #### Post params  `All required keys`  #### Response codes(s) `200` OK  `401` Collectio does not have write access for api  `404` Entity not found  `412` Precondition failed _Please read response message_  `500` Internal server error _Please read response message_
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter k0int: (form)  
     - parameter key1string: (form)  
     - parameter key2float: (form)  
     - parameter key3wysiwygsim: (form)  
     - parameter key4asset: (form)  
     - parameter key5boolean: (form)  
     - parameter key6wysiwygadvanced: (form)  
     - returns: RequestBuilder<Void> 
     */
    open class func createitemWithRequestBuilder(xApplicationId: String, xRestApiKey: String, k0int: Int, key1string: String, key2float: Double, key3wysiwygsim: String, key4asset: String, key5boolean: Bool, key6wysiwygadvanced: String) -> RequestBuilder<Void> {
        let path = "/api/v2/content/collections/1/items"
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "k0int": k0int.encodeToJSON(),
            "key1string": key1string.encodeToJSON(),
            "key2float": key2float.encodeToJSON(),
            "key3wysiwygsim": key3wysiwygsim.encodeToJSON(),
            "key4asset": key4asset.encodeToJSON(),
            "key5boolean": key5boolean.encodeToJSON(),
            "key6wysiwygadvanced": key6wysiwygadvanced.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Createitem1
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter k0int: (form)  
     - parameter key1string: (form)  
     - parameter key2float: (form)  
     - parameter key3wysiwygsim: (form)  
     - parameter key4asset: (form)  
     - parameter key5boolean: (form)  
     - parameter key6wysiwygadvanced: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createitem1(xApplicationId: String, xRestApiKey: String, k0int: Int, key1string: String, key2float: Double, key3wysiwygsim: String, key4asset: String, key5boolean: Bool, key6wysiwygadvanced: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createitem1WithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey, k0int: k0int, key1string: key1string, key2float: key2float, key3wysiwygsim: key3wysiwygsim, key4asset: key4asset, key5boolean: key5boolean, key6wysiwygadvanced: key6wysiwygadvanced).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Createitem1
     - POST /api/v1/content/collections/1/items
     - Create a new item to a array type collection #### Request details Method: `POST`  URL: `api/v1/content/responses/{collection_id}/items`  #### Headers `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters `collection_id` (int) **required** _ID of content collection_  #### Post params  `All required keys`  #### Response codes(s) `200` OK  `401` Collectio does not have write access for api   `412` Precondition failed _Please read response message_  `445` Entity not found  `500` Internal server error _Please read response message_
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter k0int: (form)  
     - parameter key1string: (form)  
     - parameter key2float: (form)  
     - parameter key3wysiwygsim: (form)  
     - parameter key4asset: (form)  
     - parameter key5boolean: (form)  
     - parameter key6wysiwygadvanced: (form)  
     - returns: RequestBuilder<Void> 
     */
    open class func createitem1WithRequestBuilder(xApplicationId: String, xRestApiKey: String, k0int: Int, key1string: String, key2float: Double, key3wysiwygsim: String, key4asset: String, key5boolean: Bool, key6wysiwygadvanced: String) -> RequestBuilder<Void> {
        let path = "/api/v1/content/collections/1/items"
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "k0int": k0int.encodeToJSON(),
            "key1string": key1string.encodeToJSON(),
            "key2float": key2float.encodeToJSON(),
            "key3wysiwygsim": key3wysiwygsim.encodeToJSON(),
            "key4asset": key4asset.encodeToJSON(),
            "key5boolean": key5boolean.encodeToJSON(),
            "key6wysiwygadvanced": key6wysiwygadvanced.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Deleteitem
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteitem(xApplicationId: String, xRestApiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteitemWithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deleteitem
     - DELETE /api/v2/content/collections/1/items/13
     - Create a new item to a array type collection #### Request details Method: `DELETE`  URL: `api/v2/content/responses/{collection_id}/items{item_id}`  #### Headers `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters `collection_id` (int) **required** _ID of content collection_  `item_id` (int) **required** _ID of content collection item_  #### Response codes(s) `200` OK  `401` Collection does not have write access for api   `404` Entity not found  `500` Internal server error _Please read response message_
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteitemWithRequestBuilder(xApplicationId: String, xRestApiKey: String) -> RequestBuilder<Void> {
        let path = "/api/v2/content/collections/1/items/13"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Deleteitem1
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteitem1(xApplicationId: String, xRestApiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteitem1WithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Deleteitem1
     - DELETE /api/v1/content/collections/1/items/13
     - Create a new item to a array type collection #### Request details Method: `DELETE`  URL: `api/v1/content/responses/{collection_id}/items{item_id}`  #### Headers `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters `collection_id` (int) **required** _ID of content collection_  `item_id` (int) **required** _ID of content collection item_  #### Response codes(s) `200` OK  `401` Collection does not have write access for api  `445` Entity not found  `500` Internal server error _Please read response message_
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - returns: RequestBuilder<Void> 
     */
    open class func deleteitem1WithRequestBuilder(xApplicationId: String, xRestApiKey: String) -> RequestBuilder<Void> {
        let path = "/api/v1/content/collections/1/items/13"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Update
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter contentType: (header)  
     - parameter k0int: (form)  
     - parameter key1string: (form)  
     - parameter key2float: (form)  
     - parameter key3wysiwygsim: (form)  
     - parameter key4asset: (form)  
     - parameter key5boolean: (form)  
     - parameter key6wysiwygadvanced: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update(xApplicationId: String, xRestApiKey: String, contentType: String, k0int: Int, key1string: String, key2float: Double, key3wysiwygsim: String, key4asset: String, key5boolean: Bool, key6wysiwygadvanced: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        updateWithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey, contentType: contentType, k0int: k0int, key1string: key1string, key2float: key2float, key3wysiwygsim: key3wysiwygsim, key4asset: key4asset, key5boolean: key5boolean, key6wysiwygadvanced: key6wysiwygadvanced).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update
     - POST /api/v2/content/collections/1/items/14/update
     - Create a new item to a array type collection #### Request details Method: `POST`  URL: `api/v2/content/responses/{collection_id}/items`  #### Headers `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters `collection_id` (int) **required** _ID of content collection_  #### Post params  `All required keys`  #### Response codes(s) `200` OK  `401` Collectio does not have write access for api   `404` Entity not found  `412` Precondition failed _Please read response message_  `500` Internal server error _Please read response message_
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter contentType: (header)  
     - parameter k0int: (form)  
     - parameter key1string: (form)  
     - parameter key2float: (form)  
     - parameter key3wysiwygsim: (form)  
     - parameter key4asset: (form)  
     - parameter key5boolean: (form)  
     - parameter key6wysiwygadvanced: (form)  
     - returns: RequestBuilder<Void> 
     */
    open class func updateWithRequestBuilder(xApplicationId: String, xRestApiKey: String, contentType: String, k0int: Int, key1string: String, key2float: Double, key3wysiwygsim: String, key4asset: String, key5boolean: Bool, key6wysiwygadvanced: String) -> RequestBuilder<Void> {
        let path = "/api/v2/content/collections/1/items/14/update"
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "k0int": k0int.encodeToJSON(),
            "key1string": key1string.encodeToJSON(),
            "key2float": key2float.encodeToJSON(),
            "key3wysiwygsim": key3wysiwygsim.encodeToJSON(),
            "key4asset": key4asset.encodeToJSON(),
            "key5boolean": key5boolean.encodeToJSON(),
            "key6wysiwygadvanced": key6wysiwygadvanced.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON(),
            "Content-Type": contentType.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Update1
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter contentType: (header)  
     - parameter k0int: (form)  
     - parameter key1string: (form)  
     - parameter key2float: (form)  
     - parameter key3wysiwygsim: (form)  
     - parameter key4asset: (form)  
     - parameter key5boolean: (form)  
     - parameter key6wysiwygadvanced: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func update1(xApplicationId: String, xRestApiKey: String, contentType: String, k0int: Int, key1string: String, key2float: Double, key3wysiwygsim: String, key4asset: String, key5boolean: Bool, key6wysiwygadvanced: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        update1WithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey, contentType: contentType, k0int: k0int, key1string: key1string, key2float: key2float, key3wysiwygsim: key3wysiwygsim, key4asset: key4asset, key5boolean: key5boolean, key6wysiwygadvanced: key6wysiwygadvanced).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update1
     - POST /api/v1/content/collections/1/items/14/update
     - Create a new item to a array type collection #### Request details Method: `POST`  URL: `api/v1/content/responses/{collection_id}/items`  #### Headers `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters `collection_id` (int) **required** _ID of content collection_  #### Post params  `All required keys`  #### Response codes(s) `200` OK  `401` Collectio does not have write access for api   `412` Precondition failed _Please read response message_  `445` Entity not found  `500` Internal server error _Please read response message_
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter contentType: (header)  
     - parameter k0int: (form)  
     - parameter key1string: (form)  
     - parameter key2float: (form)  
     - parameter key3wysiwygsim: (form)  
     - parameter key4asset: (form)  
     - parameter key5boolean: (form)  
     - parameter key6wysiwygadvanced: (form)  
     - returns: RequestBuilder<Void> 
     */
    open class func update1WithRequestBuilder(xApplicationId: String, xRestApiKey: String, contentType: String, k0int: Int, key1string: String, key2float: Double, key3wysiwygsim: String, key4asset: String, key5boolean: Bool, key6wysiwygadvanced: String) -> RequestBuilder<Void> {
        let path = "/api/v1/content/collections/1/items/14/update"
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "k0int": k0int.encodeToJSON(),
            "key1string": key1string.encodeToJSON(),
            "key2float": key2float.encodeToJSON(),
            "key3wysiwygsim": key3wysiwygsim.encodeToJSON(),
            "key4asset": key4asset.encodeToJSON(),
            "key5boolean": key5boolean.encodeToJSON(),
            "key6wysiwygadvanced": key6wysiwygadvanced.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON(),
            "Content-Type": contentType.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     View
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func view(xApplicationId: String, xRestApiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        viewWithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     View
     - GET /api/v2/content/collections/1
     - Get a default type of content collection  #### Request details Method: `GET`  URL: `api/v2/content/responses/{collection_id}`  #### Headers `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters `collection_id` (int) **required** _ID of content collection_  #### Response codes(s) `200` OK  `404` Entity not found  `500` Internal server error _Please read response message_
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - returns: RequestBuilder<Void> 
     */
    open class func viewWithRequestBuilder(xApplicationId: String, xRestApiKey: String) -> RequestBuilder<Void> {
        let path = "/api/v2/content/collections/1"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     View1
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func view1(xApplicationId: String, xRestApiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        view1WithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     View1
     - GET /api/v1/content/collections/1
     - Get a default type of content collection  #### Request details Method: `GET`  URL: `api/v1/content/responses/{collection_id}`  #### Headers `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters `collection_id` (int) **required** _ID of content collection_  #### Response codes(s) `200` OK  `445` Entity not found  `500` Internal server error _Please read response message_
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - returns: RequestBuilder<Void> 
     */
    open class func view1WithRequestBuilder(xApplicationId: String, xRestApiKey: String) -> RequestBuilder<Void> {
        let path = "/api/v1/content/collections/1"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Viewitem
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func viewitem(xApplicationId: String, xRestApiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        viewitemWithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Viewitem
     - GET /api/v2/content/collections/1/items/5
     - Create a new item to a array type collection #### Request details Method: `GET`  URL: `api/v2/content/responses/{collection_id}/items{item_id}`  #### Headers `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters `collection_id` (int) **required** _ID of content collection_  `item_id` (int) **required** _ID of content collection item_  #### Response codes(s) `200` OK  `401` Collection does not have write access for api  `445` Entity not found
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - returns: RequestBuilder<Void> 
     */
    open class func viewitemWithRequestBuilder(xApplicationId: String, xRestApiKey: String) -> RequestBuilder<Void> {
        let path = "/api/v2/content/collections/1/items/5"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Viewitem1
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func viewitem1(xApplicationId: String, xRestApiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        viewitem1WithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Viewitem1
     - GET /api/v1/content/collections/1/items/5
     - Create a new item to a array type collection #### Request details Method: `GET`  URL: `api/v1/content/responses/{collection_id}/items{item_id}`  #### Headers `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters `collection_id` (int) **required** _ID of content collection_  `item_id` (int) **required** _ID of content collection item_  #### Response codes(s) `200` OK  `401` Collection does not have write access for api  `445` Entity not found 
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - returns: RequestBuilder<Void> 
     */
    open class func viewitem1WithRequestBuilder(xApplicationId: String, xRestApiKey: String) -> RequestBuilder<Void> {
        let path = "/api/v1/content/collections/1/items/5"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
