//
// RateRemindersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class RateRemindersAPI {
    /**
     GetShow
     
     - parameter platform: (query)  
     - parameter guid: (query)  
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getShow(platform: String, guid: Int, xApplicationId: String, xRestApiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getShowWithRequestBuilder(platform: platform, guid: guid, xApplicationId: xApplicationId, xRestApiKey: xRestApiKey).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     GetShow
     - GET /api/v2/notify/rate_reminder
     - Get rate reminder  #### Request details Method: `GET`  URL: `/api/v2/notify/rate_reminder`  #### Headers  `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters `guid` (int?) **required** _[?]_  `platform` (string) **required** _[is this used at all?]_  #### Response codes `200` OK  `412` Precondition failed  `445` Entity not found
     - parameter platform: (query)  
     - parameter guid: (query)  
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - returns: RequestBuilder<Void> 
     */
    open class func getShowWithRequestBuilder(platform: String, guid: Int, xApplicationId: String, xRestApiKey: String) -> RequestBuilder<Void> {
        let path = "/api/v2/notify/rate_reminder"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "platform": platform.encodeToJSON(), 
            "guid": guid.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     GetShow1
     
     - parameter platform: (query)  
     - parameter guid: (query)  
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getShow1(platform: String, guid: Int, xApplicationId: String, xRestApiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getShow1WithRequestBuilder(platform: platform, guid: guid, xApplicationId: xApplicationId, xRestApiKey: xRestApiKey).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     GetShow1
     - GET /api/v1/notify/rate_reminder
     - Get rate reminder  #### Request details Method: `GET`  URL: `/api/v1/notify/rate_reminder`  #### Headers  `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters `guid` (int?) **required** _[?]_  `platform` (string) **required** _[is this used at all?]_  #### Response codes `200` OK  `412` Precondition failed  `445` Entity not found
     - parameter platform: (query)  
     - parameter guid: (query)  
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - returns: RequestBuilder<Void> 
     */
    open class func getShow1WithRequestBuilder(platform: String, guid: Int, xApplicationId: String, xRestApiKey: String) -> RequestBuilder<Void> {
        let path = "/api/v1/notify/rate_reminder"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "platform": platform.encodeToJSON(), 
            "guid": guid.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Markasseen1
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter guid: (form)  
     - parameter platform: (form)  
     - parameter answer: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func markasseen1(xApplicationId: String, xRestApiKey: String, guid: Int, platform: String, answer: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        markasseen1WithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey, guid: guid, platform: platform, answer: answer).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Markasseen1
     - POST /api/v1/notify/rate_reminder/views
     - Post rate reminder  #### Request details Method: `POST`  URL: `/api/v1/notify/rate_reminder/views`  #### Headers  `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters `guid` (int?) **required** _[?]_  `platform` (string) **required** _[is this used at all?]_  `answer` (string) **required** _[\"yes\", \"no\", \"later\"]_  #### Response codes `200` OK  `412` Precondition failed  `445` Entity not found
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter guid: (form)  
     - parameter platform: (form)  
     - parameter answer: (form)  
     - returns: RequestBuilder<Void> 
     */
    open class func markasseen1WithRequestBuilder(xApplicationId: String, xRestApiKey: String, guid: Int, platform: String, answer: String) -> RequestBuilder<Void> {
        let path = "/api/v1/notify/rate_reminder/views"
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "guid": guid.encodeToJSON(),
            "platform": platform.encodeToJSON(),
            "answer": answer.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     PostMarkasseen
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter guid: (form)  
     - parameter platform: (form)  
     - parameter answer: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postMarkasseen(xApplicationId: String, xRestApiKey: String, guid: Int, platform: String, answer: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postMarkasseenWithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey, guid: guid, platform: platform, answer: answer).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     PostMarkasseen
     - POST /api/v2/notify/rate_reminder/views
     - Post rate reminder  #### Request details Method: `POST`  URL: `/api/v2/notify/rate_reminder/views`  #### Headers  `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters `guid` (int?) **required** _[?]_  `platform` (string) **required** _[is this used at all?]_  `answer` (string) **required** _[\"yes\", \"no\", \"later\"]_  #### Response codes `200` OK  `412` Precondition failed  `445` Entity not found
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter guid: (form)  
     - parameter platform: (form)  
     - parameter answer: (form)  
     - returns: RequestBuilder<Void> 
     */
    open class func postMarkasseenWithRequestBuilder(xApplicationId: String, xRestApiKey: String, guid: Int, platform: String, answer: String) -> RequestBuilder<Void> {
        let path = "/api/v2/notify/rate_reminder/views"
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "guid": guid.encodeToJSON(),
            "platform": platform.encodeToJSON(),
            "answer": answer.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
