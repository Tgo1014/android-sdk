//
// VersionControlAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class VersionControlAPI {
    /**
     Indexupdate
     
     - parameter platform: (query)  
     - parameter currentVersion: (query)  
     - parameter lastVersion: (query)  
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func indexupdate(platform: String, currentVersion: Double, lastVersion: Double, xApplicationId: String, xRestApiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: VersionControl?,_ error: Error?) -> Void)) {
        indexupdateWithRequestBuilder(platform: platform, currentVersion: currentVersion, lastVersion: lastVersion, xApplicationId: xApplicationId, xRestApiKey: xRestApiKey).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Indexupdate
     - GET /api/v2/notify/updates
     - Get app updated  #### Request details Method:    `GET`  URL:    `/api/v2/notify/updates`  #### Headers  `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Query parameters `platform` (string) **required** _[\"ios\", \"android\", \"windows\"]_  `current_version` (string) **required** _Current version of app making the request_  `last_version` (string) _[?]_  `test` (bool) _Enable test mode, false equals production_  #### Response codes `200` OK  `412` Precondition failed
     - parameter platform: (query)  
     - parameter currentVersion: (query)  
     - parameter lastVersion: (query)  
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - returns: RequestBuilder<VersionControl> 
     */
    open class func indexupdateWithRequestBuilder(platform: String, currentVersion: Double, lastVersion: Double, xApplicationId: String, xRestApiKey: String) -> RequestBuilder<VersionControl> {
        let path = "/api/v2/notify/updates"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "platform": platform.encodeToJSON(), 
            "current_version": currentVersion.encodeToJSON(), 
            "last_version": lastVersion.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<VersionControl>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Indexupdate1
     
     - parameter platform: (query)  
     - parameter currentVersion: (query)  
     - parameter lastVersion: (query)  
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func indexupdate1(platform: String, currentVersion: Double, lastVersion: Double, xApplicationId: String, xRestApiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        indexupdate1WithRequestBuilder(platform: platform, currentVersion: currentVersion, lastVersion: lastVersion, xApplicationId: xApplicationId, xRestApiKey: xRestApiKey).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Indexupdate1
     - GET /api/v1/notify/updates
     - Get app updated  #### Request details Method:    `GET`  URL:    `/api/v1/notify/updates`  #### Headers  `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Query parameters `platform` (string) **required** _[\"ios\", \"android\", \"windows\"]_  `current_version` (string) **required** _Current version of app making the request_  `last_version` (string) _[?]_  `test` (bool) _Enable test mode, false equals production_  #### Response codes `200` OK  `412` Precondition failed
     - parameter platform: (query)  
     - parameter currentVersion: (query)  
     - parameter lastVersion: (query)  
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - returns: RequestBuilder<Void> 
     */
    open class func indexupdate1WithRequestBuilder(platform: String, currentVersion: Double, lastVersion: Double, xApplicationId: String, xRestApiKey: String) -> RequestBuilder<Void> {
        let path = "/api/v1/notify/updates"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "platform": platform.encodeToJSON(), 
            "current_version": currentVersion.encodeToJSON(), 
            "last_version": lastVersion.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Markupdateasseen
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter guid: (form)  
     - parameter updateId: (form)  
     - parameter answer: (form)  
     - parameter type: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func markupdateasseen(xApplicationId: String, xRestApiKey: String, guid: Int, updateId: Int, answer: String, type: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        markupdateasseenWithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey, guid: guid, updateId: updateId, answer: answer, type: type).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Markupdateasseen
     - POST /api/v2/notify/updates/views
     - Register a view update  #### Request details Method:    `POST`  URL:    `/api/v2/notify/updates/views`  #### Headers  `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Parameters `guid` (int) **required** _[?]_  `update_id` (int) **required** _Id of update where view was updated_  `answer` (string) **required** _[\"no\", \"yes\"]_  `type` (string) **required** _[\"newer_version\", \"new_in_version\"]_   #### Response codes `200` OK  `412` Precondition failed
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter guid: (form)  
     - parameter updateId: (form)  
     - parameter answer: (form)  
     - parameter type: (form)  
     - returns: RequestBuilder<Void> 
     */
    open class func markupdateasseenWithRequestBuilder(xApplicationId: String, xRestApiKey: String, guid: Int, updateId: Int, answer: String, type: String) -> RequestBuilder<Void> {
        let path = "/api/v2/notify/updates/views"
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "guid": guid.encodeToJSON(),
            "update_id": updateId.encodeToJSON(),
            "answer": answer.encodeToJSON(),
            "type": type.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Markupdateasseen1
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter guid: (form)  
     - parameter updateId: (form)  
     - parameter answer: (form)  
     - parameter type: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func markupdateasseen1(xApplicationId: String, xRestApiKey: String, guid: Int, updateId: Int, answer: String, type: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        markupdateasseen1WithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey, guid: guid, updateId: updateId, answer: answer, type: type).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Markupdateasseen1
     - POST /api/v1/notify/updates/views
     - Register a view update  #### Request details Method:    `POST`  URL:    `/api/v1/notify/updates/views`  #### Headers  `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Parameters `guid` (int) **required** _[?]_  `update_id` (int) **required** _Id of update where view was updated_  `answer` (string) **required** _[\"no\", \"yes\"]_  `type` (string) **required** _[\"newer_version\", \"new_in_version\"]_   #### Response codes `200` OK  `412` Precondition failed
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter guid: (form)  
     - parameter updateId: (form)  
     - parameter answer: (form)  
     - parameter type: (form)  
     - returns: RequestBuilder<Void> 
     */
    open class func markupdateasseen1WithRequestBuilder(xApplicationId: String, xRestApiKey: String, guid: Int, updateId: Int, answer: String, type: String) -> RequestBuilder<Void> {
        let path = "/api/v1/notify/updates/views"
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "guid": guid.encodeToJSON(),
            "update_id": updateId.encodeToJSON(),
            "answer": answer.encodeToJSON(),
            "type": type.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
