//
// ScropperAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class ScropperAPI {
    /**
     Getfocalpoint
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter contentType: (header)  
     - parameter url: (form)  
     - parameter dataCenter: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getfocalpoint(xApplicationId: String, xRestApiKey: String, contentType: String, url: String, dataCenter: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Scropper?,_ error: Error?) -> Void)) {
        getfocalpointWithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey, contentType: contentType, url: url, dataCenter: dataCenter).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Getfocalpoint
     - POST /api/v2/scropper
     - Get focal point on a image   **Initial response time can be 15sec in case you hit a cold container**   #### Request details Method: `POST`  URL: `api/v2/content/scropper`  #### Headers `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Post params `url` (string) **required if no file, only jpg, png**   `file` (file, max 30mb) **required if no url, only jpg, png**   `data-center` (string) **optional, default: aws:ireland** **(Options: aws:ireland)**   #### Response codes(s) `200` OK  `412` Validation error  `500` Internal server error _Please read response message_
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter contentType: (header)  
     - parameter url: (form)  
     - parameter dataCenter: (form)  
     - returns: RequestBuilder<Scropper> 
     */
    open class func getfocalpointWithRequestBuilder(xApplicationId: String, xRestApiKey: String, contentType: String, url: String, dataCenter: String) -> RequestBuilder<Scropper> {
        let path = "/api/v2/scropper"
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "url": url.encodeToJSON(),
            "data-center": dataCenter.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON(),
            "Content-Type": contentType.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Scropper>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
