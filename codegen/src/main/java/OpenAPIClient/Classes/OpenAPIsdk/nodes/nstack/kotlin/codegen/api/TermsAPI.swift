//
// TermsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class TermsAPI {
    /**
     Index
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter nMeta: (header)  
     - parameter acceptLanguage: (header)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func index(xApplicationId: String, xRestApiKey: String, nMeta: String, acceptLanguage: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        indexWithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey, nMeta: nMeta, acceptLanguage: acceptLanguage).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Index
     - GET /terms
     - List all Terms  #### Request details Method: `GET`  URL: `api/v2/content/terms`  #### Headers `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_   #### Response codes(s) `200` OK  `404` Entity not found  `500` Internal server error _Please read response message_
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter nMeta: (header)  
     - parameter acceptLanguage: (header)  
     - returns: RequestBuilder<Void> 
     */
    open class func indexWithRequestBuilder(xApplicationId: String, xRestApiKey: String, nMeta: String, acceptLanguage: String) -> RequestBuilder<Void> {
        let path = "/terms"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON(),
            "N-Meta": nMeta.encodeToJSON(),
            "Accept-Language": acceptLanguage.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Indexversions
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter nMeta: (header)  
     - parameter acceptLanguage: (header)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func indexversions(xApplicationId: String, xRestApiKey: String, nMeta: String, acceptLanguage: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        indexversionsWithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey, nMeta: nMeta, acceptLanguage: acceptLanguage).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Indexversions
     - GET /api/v2/content/terms/some-terms-1/versions
     - List all Version  #### Request details Method: `GET`  URL: `api/v2/content/terms/{slugOrId}/versions`  #### Headers `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Response codes(s) `200` OK  `404` Entity not found  `500` Internal server error _Please read response message_
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter nMeta: (header)  
     - parameter acceptLanguage: (header)  
     - returns: RequestBuilder<Void> 
     */
    open class func indexversionsWithRequestBuilder(xApplicationId: String, xRestApiKey: String, nMeta: String, acceptLanguage: String) -> RequestBuilder<Void> {
        let path = "/api/v2/content/terms/some-terms-1/versions"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON(),
            "N-Meta": nMeta.encodeToJSON(),
            "Accept-Language": acceptLanguage.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Newestversion
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter nMeta: (header)  
     - parameter acceptLanguage: (header)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func newestversion(xApplicationId: String, xRestApiKey: String, nMeta: String, acceptLanguage: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        newestversionWithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey, nMeta: nMeta, acceptLanguage: acceptLanguage).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Newestversion
     - GET /api/v2/content/terms/some-terms-1/versions/newest
     - List all Version  #### Request details Method: `GET`  URL: `api/v2/content/terms/{slugOrId}/versions/newest`  #### Headers `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Response codes(s) `200` OK  `404` Entity not found  `500` Internal server error _Please read response message_
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter nMeta: (header)  
     - parameter acceptLanguage: (header)  
     - returns: RequestBuilder<Void> 
     */
    open class func newestversionWithRequestBuilder(xApplicationId: String, xRestApiKey: String, nMeta: String, acceptLanguage: String) -> RequestBuilder<Void> {
        let path = "/api/v2/content/terms/some-terms-1/versions/newest"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON(),
            "N-Meta": nMeta.encodeToJSON(),
            "Accept-Language": acceptLanguage.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Showversion
     
     - parameter guid: (query)  
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter nMeta: (header)  
     - parameter acceptLanguage: (header)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func showversion(guid: String, xApplicationId: String, xRestApiKey: String, nMeta: String, acceptLanguage: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        showversionWithRequestBuilder(guid: guid, xApplicationId: xApplicationId, xRestApiKey: xRestApiKey, nMeta: nMeta, acceptLanguage: acceptLanguage).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Showversion
     - GET /api/v2/content/terms/versions/5
     - List all Version  #### Request details Method: `GET`  URL: `api/v2/content/terms/versions/{id}`  #### Headers `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  `Accept-Language` (string) **optional** _Set this to get best fit locale_  #### Query params `guid` (string) **optional** _If you want `has_viewed` to be calculated_  #### Response codes(s) `200` OK  `404` Entity not found  `500` Internal server error _Please read response message_
     - parameter guid: (query)  
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter nMeta: (header)  
     - parameter acceptLanguage: (header)  
     - returns: RequestBuilder<Void> 
     */
    open class func showversionWithRequestBuilder(guid: String, xApplicationId: String, xRestApiKey: String, nMeta: String, acceptLanguage: String) -> RequestBuilder<Void> {
        let path = "/api/v2/content/terms/versions/5"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "guid": guid.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON(),
            "N-Meta": nMeta.encodeToJSON(),
            "Accept-Language": acceptLanguage.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     StoreView
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter nMeta: (header)  
     - parameter acceptLanguage: (header)  
     - parameter termVersionId: (form)  
     - parameter guid: (form)  
     - parameter identifier: (form)  
     - parameter locale: (form)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func storeView(xApplicationId: String, xRestApiKey: String, nMeta: String, acceptLanguage: String, termVersionId: Int, guid: String, identifier: String, locale: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        storeViewWithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey, nMeta: nMeta, acceptLanguage: acceptLanguage, termVersionId: termVersionId, guid: guid, identifier: identifier, locale: locale).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     StoreView
     - POST /api/v2/content/terms/versions/views
     - Create a new View #### Request details Method: `POST`  URL: `/api/v2/content/terms/versions/{id}/views`  #### Headers `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Post params `term_version_id` (int) **required** _ID of Terms Version_  `guid` (string) **required** _GUID_  `identifier` (string) **required**  `locale` (string) **required**  #### Response codes(s) `200` OK  `412` Precondition failed _Please read response message_  `500` Internal server error _Please read response message_
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter nMeta: (header)  
     - parameter acceptLanguage: (header)  
     - parameter termVersionId: (form)  
     - parameter guid: (form)  
     - parameter identifier: (form)  
     - parameter locale: (form)  
     - returns: RequestBuilder<Void> 
     */
    open class func storeViewWithRequestBuilder(xApplicationId: String, xRestApiKey: String, nMeta: String, acceptLanguage: String, termVersionId: Int, guid: String, identifier: String, locale: String) -> RequestBuilder<Void> {
        let path = "/api/v2/content/terms/versions/views"
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "term_version_id": termVersionId.encodeToJSON(),
            "guid": guid.encodeToJSON(),
            "identifier": identifier.encodeToJSON(),
            "locale": locale.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON(),
            "N-Meta": nMeta.encodeToJSON(),
            "Accept-Language": acceptLanguage.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
