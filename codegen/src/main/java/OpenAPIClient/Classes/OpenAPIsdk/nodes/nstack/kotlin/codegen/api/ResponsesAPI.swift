//
// ResponsesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class ResponsesAPI {
    /**
     Show
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter contentType: (header)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func show(xApplicationId: String, xRestApiKey: String, contentType: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        showWithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey, contentType: contentType).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Show
     - GET /api/v2/content/responses/15
     - Get one response  #### Request details Method: `GET`  URL: `api/v2/content/responses/{id_or_slug}`  #### Headers `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters `id_or_slug` (string/int) **required** _ID or slug of content type [15, \"terms\", \"about\"]_  #### Query params `data` (bool) **option** _defaul true - should the object be in data_  #### Response codes(s) `200` OK  `404` Entity not found  `500` Internal server error _Please read response message_
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter contentType: (header)  
     - returns: RequestBuilder<Void> 
     */
    open class func showWithRequestBuilder(xApplicationId: String, xRestApiKey: String, contentType: String) -> RequestBuilder<Void> {
        let path = "/api/v2/content/responses/15"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON(),
            "Content-Type": contentType.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Show1
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter contentType: (header)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func show1(xApplicationId: String, xRestApiKey: String, contentType: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        show1WithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey, contentType: contentType).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Show1
     - GET /api/v1/content/responses/15
     - Get one response  #### Request details Method: `GET`  URL: `api/v1/content/responses/{id_or_slug}`  #### Headers `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters `id_or_slug` (string/int) **required** _ID or slug of content type [15, \"terms\", \"about\"]_  #### Query params `data` (bool) **option** _defaul true - should the object be in data_  #### Response codes(s) `200` OK  `445` Entity not found  `500` Internal server error _Please read response message_
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter contentType: (header)  
     - returns: RequestBuilder<Void> 
     */
    open class func show1WithRequestBuilder(xApplicationId: String, xRestApiKey: String, contentType: String) -> RequestBuilder<Void> {
        let path = "/api/v1/content/responses/15"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON(),
            "Content-Type": contentType.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
