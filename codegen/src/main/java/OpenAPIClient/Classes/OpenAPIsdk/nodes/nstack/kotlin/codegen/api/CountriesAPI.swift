//
// CountriesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class CountriesAPI {
    /**
     GetIndex1
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIndex1(xApplicationId: String, xRestApiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getIndex1WithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     GetIndex1
     - GET /api/v2/geographic/countries
     - Retrieve a list of valid countries on Earth  #### Request details Method:    `GET`  URL:    `/api/v2/geographic/countries`  #### Headers  `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Query parameters (filters) `limit` (int) _Eg: [/api/geographic/countries?limit=1] Default limit is 500_  `order_by_column` (string) _Eg; [/api/geographic/countries?order\\_by\\_column=name]_  `order_by_direction` (string) _Eg; [/api/geographic/countries?order\\_by\\_direction=asc]_  `search` (string) _Eg: [/api/geographic/countries?search=Andorra]_  `fields` (string) _Eg: [/api/geographic/countries?fields=name,code]_  `continents` (string) _Eg: [/api/geographic/countries?continents=EU,AF]_  #### Response codes(s) `200` OK  `412` Precondition failed _Invalid filters_
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - returns: RequestBuilder<Void> 
     */
    open class func getIndex1WithRequestBuilder(xApplicationId: String, xRestApiKey: String) -> RequestBuilder<Void> {
        let path = "/api/v2/geographic/countries"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     GetIndex11
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getIndex11(xApplicationId: String, xRestApiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getIndex11WithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     GetIndex11
     - GET /api/v1/geographic/countries
     - Retrieve a list of valid countries on Earth  #### Request details Method:    `GET`  URL:    `/api/v1/geographic/countries`  #### Headers  `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Query parameters (filters) `limit` (int) _Eg: [/api/geographic/countries?limit=1] Default limit is 500_  `order_by_column` (string) _Eg; [/api/geographic/countries?order\\_by\\_column=name]_  `order_by_direction` (string) _Eg; [/api/geographic/countries?order\\_by\\_direction=asc]_  `search` (string) _Eg: [/api/geographic/countries?search=Andorra]_  `fields` (string) _Eg: [/api/geographic/countries?fields=name,code]_  `continents` (string) _Eg: [/api/geographic/countries?continents=EU,AF]_  #### Response codes(s) `200` OK  `412` Precondition failed _Invalid filters_ 
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - returns: RequestBuilder<Void> 
     */
    open class func getIndex11WithRequestBuilder(xApplicationId: String, xRestApiKey: String) -> RequestBuilder<Void> {
        let path = "/api/v1/geographic/countries"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     GetShow11
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getShow11(xApplicationId: String, xRestApiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getShow11WithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     GetShow11
     - GET /api/v1/geographic/countries/1
     - Retrieve details of a specific country on Earth  #### Request details Method:    `GET`  URL:    `/api/v1/geographic/countries/{id}`  #### Headers `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters `id` (int) **required** _Country id_  #### Response codes(s) `200` OK  `445` Entity not found
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - returns: RequestBuilder<Void> 
     */
    open class func getShow11WithRequestBuilder(xApplicationId: String, xRestApiKey: String) -> RequestBuilder<Void> {
        let path = "/api/v1/geographic/countries/1"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     GetShow1234
     
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getShow1234(xApplicationId: String, xRestApiKey: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getShow1234WithRequestBuilder(xApplicationId: xApplicationId, xRestApiKey: xRestApiKey).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     GetShow1234
     - GET /api/v2/geographic/countries/4
     - Retrieve details of a specific country on Earth  #### Request details Method:    `GET`  URL:    `/api/v2/geographic/countries/{id}`  #### Headers `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters `id` (int) **required** _Country id_  #### Response codes(s) `200` OK  `404` Entity not found
     - parameter xApplicationId: (header)  
     - parameter xRestApiKey: (header)  
     - returns: RequestBuilder<Void> 
     */
    open class func getShow1234WithRequestBuilder(xApplicationId: String, xRestApiKey: String) -> RequestBuilder<Void> {
        let path = "/api/v2/geographic/countries/4"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "X-Application-Id": xApplicationId.encodeToJSON(),
            "X-Rest-Api-Key": xRestApiKey.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
