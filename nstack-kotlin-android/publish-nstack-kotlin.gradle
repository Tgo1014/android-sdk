apply plugin: 'signing'
apply plugin: 'maven-publish'
apply plugin: 'digital.wup.android-maven-publish'
apply plugin: 'signing'

// Username & password for Sonatype, stored in gradle.properties
def _ossrhUsername = System.getenv('NEXUS_USERNAME')
def _ossrhPassword = System.getenv('NEXUS_PASSWORD')

// Artifact settings
final def _isReleaseVersion = !VERSION_NAME.endsWith("SNAPSHOT")

nexusStaging {
    packageGroup = "dk.nodes"
    delayBetweenRetriesInMillis = 4000
    stagingProfileId = "5a414403b5bf75"
}

afterEvaluate {

    task androidJavadoc(type: Javadoc) {
        source = android.sourceSets.main.java.sourceFiles
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += configurations.compile
    }

    task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
        archiveClassifier.set('javadoc')
        from androidJavadoc.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        archiveClassifier.set('sources')
        from android.sourceSets.main.java.sourceFiles
    }

    publishing {
        publications {
            nstackKotlinAar(MavenPublication) {

                artifact androidSourcesJar
                artifact androidJavadocJar
                from components.android

                pom {
                    artifactId = POM_ARTIFACT_ID
                    name = POM_NAME
                    packaging = POM_PACKAGING
                    groupId = GROUP
                    description = POM_DESCRIPTION
                    version = VERSION_NAME
                    url = POM_URL
                    inceptionYear = POM_INCEPTION_YEAR

                    licenses {
                        license {
                            name = POM_LICENCE_NAME
                            url = POM_LICENCE_URL
                        }
                    }

                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                            email = POM_DEVELOPER_EMAIL
                        }
                    }

                    scm {
                        url = POM_SCM_URL
                        connection = POM_SCM_CONNECTION
                    }

                    issueManagement {
                        system = POM_ISSUE_MANAGEMENT_SYSTEM
                        url = POM_ISSUE_MANAGEMENT_URL
                    }
                }
            }
        }

        repositories {
            maven {
                credentials {
                    username _ossrhUsername
                    password _ossrhPassword
                }

                final def releasesRepoUrl = RELEASE_REPO_URL
                final def snapshotsRepoUrl = SNAPSHOT_REPO_URL

                url = _isReleaseVersion ? releasesRepoUrl : snapshotsRepoUrl
            }
        }

        if (JavaVersion.current().isJava8Compatible()) {
            allprojects {
                tasks.withType(Javadoc) {
                    options.addStringOption('Xdoclint:none', '-quiet')
                }
            }
        }

        signing {
            required {
                return _isReleaseVersion
            }

            sign publishing.publications.nstackKotlinAar
        }
    }
}