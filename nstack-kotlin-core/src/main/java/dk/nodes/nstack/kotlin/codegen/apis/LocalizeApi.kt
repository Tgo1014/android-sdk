/**
 * NOTE: This class is auto generated by the Swagger Gradle Codegen for the following API: API
 *
 * More info on this tool is available on https://github.com/Yelp/swagger-gradle-codegen
 */

package dk.nodes.nstack.kotlin.codegen.apis

import okhttp3.RequestBody

import dk.nodes.nstack.kotlin.codegen.models.Indexlanguages
import dk.nodes.nstack.kotlin.codegen.models.Indexresource
import dk.nodes.nstack.kotlin.codegen.models.Languagebestfit
import dk.nodes.nstack.kotlin.codegen.models.Showresource
import dk.nodes.nstack.kotlin.codegen.models.UntitledExample
import io.reactivex.Completable
import io.reactivex.Single
import retrofit2.http.DELETE
import retrofit2.http.GET
import retrofit2.http.Headers
import retrofit2.http.POST

@JvmSuppressWildcards
interface LocalizeApi {
  /** 
   * Delete proposal
   * Delete a specified proposal  #### Request details  Method:    `DELETE`  URL:    `{{nstackUrl}}/api/v2/content/localize/proposals/{{proposalId}}`  #### Headers   `X-Application-Id`  `X-Rest-Api-Key`  #### Query params `guid` (string) **required**  #### URL Parameters `proposalId` (int) **required**  #### Response codes(s)  `200` OK  `404` Entity not found  `401` Invalid guid
   * The endpoint is owned by NStack v2 service owner
   * @param guid  (required)
   */
  @Headers(
    "X-Operation-Id: Deleteproposal",
    "Content-Type: application/json"
  )
  @DELETE("api/v2/content/localize/proposals/9")
  fun deleteproposal(
    @retrofit2.http.Query("guid") guid: String
  ): Completable

  /** 
   * Index languages
   * Get available languages for a platfom  #### Request details  Method:    `GET`  URL:    `/api/v1/content/localize/{platform-slug}/languages`  #### Headers   `X-Application-Id`  `X-Rest-Api-Key`  #### Query params `show_inactive_languages` (bool)  #### URL Parameters `platform-slug` (string) **required**  #### Response codes(s)  `200` OK  `404` Entity not found
   * The endpoint is owned by NStack v2 service owner
   */
  @Headers(
    "X-Operation-Id: Indexlanguages",
    "Content-Type: application/json"
  )
  @GET("api/v2/content/localize/mobile/languages")
  fun indexlanguages()
    : Single<Indexlanguages>

  /** 
   * Index languages1
   * Get available languages for a platfom  #### Request details  Method:    `GET`  URL:    `/api/v1/translate/{platform-slug}/languages`  #### Headers   `X-Application-Id`  `X-Rest-Api-Key`  #### Query params `show_inactive_languages` (bool)  #### URL Parameters `platform-slug` (string) **required**  #### Response codes(s)  `200` OK 
   * The endpoint is owned by NStack v2 service owner
   */
  @Headers(
    "X-Operation-Id: Indexlanguages1",
    "Content-Type: application/json"
  )
  @GET("api/v1/localize/mobile/languages")
  fun indexlanguages1()
    : Completable

  /** 
   * Index proposal
   * #### Request details  Method:    `GET`  URL:    `/api/v2/content/localize/proposals`  #### Post params `state` (string) **optional, default unaccepted** *Options: unaccepted, accepted, all*  `guid` (string) **optional** shows if the proposal is deletable or not for the specified guid  #### Response codes(s)  `200` OK
   * The endpoint is owned by NStack v2 service owner
   */
  @Headers(
    "X-Operation-Id: Indexproposal",
    "Content-Type: application/json"
  )
  @GET("api/v2/content/localize/proposals")
  fun indexproposal()
    : Completable

  /** 
   * Index resource
   * #### Request details  Method:    `GET`  URL:    `/api/v2/content/localize/resources/platforms/{platformSlug}`  ### Url param  `platformSlug` (string) **required** *eg: mobile, backend, web*  #### Headers  `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_   ### Query  `last_updated` (date time, ISO8601) **optional** *eg: 2019-06-21T08%3A35%3A24%2B00%3A00*  - *Remember to url encode it*  - *Set timestamp from last app open (when localization has been synced), this will calculate which localizations should be updated*  `dev` (bool) **option, default false**  - *if true, bypass publishes and only use newest resource (set of key/values)*   #### Response codes(s)  `200` OK  `404` platform not found
   * The endpoint is owned by NStack v2 service owner
   */
  @Headers(
    "X-Operation-Id: Indexresource",
    "Content-Type: application/json"
  )
  @GET("api/v2/content/localize/resources/platforms/mobile")
  fun indexresource()
    : Single<Indexresource>

  /** 
   * Keys
   * #### Request details  Method:    `GET`  URL:    `/api/translate/{platform-slug}/keys`  #### Headers   `X-Application-Id`  `X-Rest-Api-Key`  `Accept-Language or X-Accept-Language`  #### Query params `section` (int/string) _id or slug_  `all` (bool) _true_  #### URL Params `platform-slug` (string) **required**  #### Response codes(s)  `200` OK 
   * The endpoint is owned by NStack v2 service owner
   * @param all  (required)
   */
  @Headers(
    "X-Operation-Id: Keys",
    "Content-Type: application/json"
  )
  @GET("api/v1/localize/mobile/keys")
  fun keys(
    @retrofit2.http.Query("all") all: Boolean
  ): Completable

  /** 
   * Keys & values for section
   * The endpoint is owned by NStack v2 service owner
   */
  @Headers(
    "X-Operation-Id: Keys&amp;valuesforsection",
    "Content-Type: application/json"
  )
  @GET("api/v1/localize/backend/keys/default")
  fun keys&amp;valuesforsection()
    : Single<UntitledExample>

  /** 
   * Language best fit
   * Get best fit language from accept-language header  #### Request details Method:    `GET`  URL:    `/api/v1/content/localize/{platform-slug}/languages/best_fit`  #### Headers  `X-Application-Id`  `X-Rest-Api-Key`  `Accept-Language or X-Accept-Language`  #### URL Parameters `platform-slug` (string) **required**  #### Response codes(s)  `200` OK  `404` Entity not found
   * The endpoint is owned by NStack v2 service owner
   */
  @Headers(
    "X-Operation-Id: Languagebestfit",
    "Content-Type: application/json"
  )
  @GET("api/v2/content/localize/mobile/languages/best_fit")
  fun languagebestfit()
    : Single<Languagebestfit>

  /** 
   * Language best fit1
   * Get best fit language from accept-language header  #### Request details Method:    `GET`  URL:    `/api/v1/translate/{platform-slug}/languages/best_fit`  #### Headers  `X-Application-Id`  `X-Rest-Api-Key`  `Accept-Language or X-Accept-Language`  #### URL Parameters `platform-slug` (string) **required**  #### Response codes(s)  `200` OK 
   * The endpoint is owned by NStack v2 service owner
   */
  @Headers(
    "X-Operation-Id: Languagebestfit1",
    "Content-Type: application/json"
  )
  @GET("api/v1/localize/mobile/languages/best_fit")
  fun languagebestfit1()
    : Completable

  /** 
   * Show resource
   * #### Request details  Method:    `GET`  URL:    `/api/v2/content/localize/resources/{id}`  #### Response codes(s)  `200` OK  `404` Not found
   * The endpoint is owned by NStack v2 service owner
   */
  @Headers(
    "X-Operation-Id: Showresource",
    "Content-Type: application/json"
  )
  @GET("api/v2/content/localize/resources/44")
  fun showresource()
    : Single<Showresource>

  /** 
   * Store proposal
   * #### Request details  Method:    `POST`  URL:    `/api/v2/content/localize/proposals`  #### Post params `key` (string) **required**   `section` (string) **required**   `value` (string) **required**   `locale` (string) **required**  *eg: da-DK, en-GB*  `platform` (string) **required** *eg: mobile, backend, web*  #### Response codes(s)  `201` Created  `412` Preconitions failed
   * The endpoint is owned by NStack v2 service owner
   * @param key  (required)
   * @param value  (required)
   * @param locale  (required)
   * @param platform  (required)
   * @param guid  (required)
   * @param section  (required)
   */
  @retrofit2.http.FormUrlEncoded
  @Headers(
    "X-Operation-Id: Storeproposal"
  )
  @POST("api/v2/content/localize/proposals")
  fun storeproposal(
    @retrofit2.http.Field("key") key: String,
    @retrofit2.http.Field("value") value: String,
    @retrofit2.http.Field("locale") locale: String,
    @retrofit2.http.Field("platform") platform: String,
    @retrofit2.http.Field("guid") guid: String,
    @retrofit2.http.Field("section") section: String
  ): Completable

}
