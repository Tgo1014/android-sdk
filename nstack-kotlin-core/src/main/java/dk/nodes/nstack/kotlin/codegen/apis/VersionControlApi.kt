/**
 * NOTE: This class is auto generated by the Swagger Gradle Codegen for the following API: API
 *
 * More info on this tool is available on https://github.com/Yelp/swagger-gradle-codegen
 */

package dk.nodes.nstack.kotlin.codegen.apis

import okhttp3.RequestBody

import io.reactivex.Completable
import retrofit2.http.GET
import retrofit2.http.Headers
import retrofit2.http.POST

@JvmSuppressWildcards
interface VersionControlApi {
  /** 
   * Index update
   * Get app updated  #### Request details Method:    `GET`  URL:    `/api/v2/notify/updates`  #### Headers  `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Query parameters `platform` (string) **required** _[\"ios\", \"android\", \"windows\"]_  `current_version` (string) **required** _Current version of app making the request_  `last_version` (string) _[?]_  `test` (bool) _Enable test mode, false equals production_  #### Response codes `200` OK  `412` Precondition failed
   * The endpoint is owned by NStack v2 service owner
   * @param platform  (required)
   * @param currentVersion  (required)
   * @param lastVersion  (required)
   */
  @Headers(
    "X-Operation-Id: Indexupdate",
    "Content-Type: application/json"
  )
  @GET("api/v2/notify/updates")
  fun indexupdate(
    @retrofit2.http.Query("platform") platform: String,
    @retrofit2.http.Query("current_version") currentVersion: Double,
    @retrofit2.http.Query("last_version") lastVersion: Double
  ): Completable

  /** 
   * Index update1
   * Get app updated  #### Request details Method:    `GET`  URL:    `/api/v1/notify/updates`  #### Headers  `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Query parameters `platform` (string) **required** _[\"ios\", \"android\", \"windows\"]_  `current_version` (string) **required** _Current version of app making the request_  `last_version` (string) _[?]_  `test` (bool) _Enable test mode, false equals production_  #### Response codes `200` OK  `412` Precondition failed
   * The endpoint is owned by NStack v2 service owner
   * @param platform  (required)
   * @param currentVersion  (required)
   * @param lastVersion  (required)
   */
  @Headers(
    "X-Operation-Id: Indexupdate1",
    "Content-Type: application/json"
  )
  @GET("api/v1/notify/updates")
  fun indexupdate1(
    @retrofit2.http.Query("platform") platform: String,
    @retrofit2.http.Query("current_version") currentVersion: Double,
    @retrofit2.http.Query("last_version") lastVersion: Double
  ): Completable

  /** 
   * Mark update as seen
   * Register a view update  #### Request details Method:    `POST`  URL:    `/api/v2/notify/updates/views`  #### Headers  `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Parameters `guid` (int) **required** _[?]_  `update_id` (int) **required** _Id of update where view was updated_  `answer` (string) **required** _[\"no\", \"yes\"]_  `type` (string) **required** _[\"newer_version\", \"new_in_version\"]_   #### Response codes `200` OK  `412` Precondition failed
   * The endpoint is owned by NStack v2 service owner
   * @param guid  (required)
   * @param updateId  (required)
   * @param answer  (required)
   * @param type  (required)
   */
  @retrofit2.http.FormUrlEncoded
  @Headers(
    "X-Operation-Id: Markupdateasseen"
  )
  @POST("api/v2/notify/updates/views")
  fun markupdateasseen(
    @retrofit2.http.Field("guid") guid: Int,
    @retrofit2.http.Field("update_id") updateId: Int,
    @retrofit2.http.Field("answer") answer: String,
    @retrofit2.http.Field("type") type: String
  ): Completable

  /** 
   * Mark update as seen1
   * Register a view update  #### Request details Method:    `POST`  URL:    `/api/v1/notify/updates/views`  #### Headers  `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### Parameters `guid` (int) **required** _[?]_  `update_id` (int) **required** _Id of update where view was updated_  `answer` (string) **required** _[\"no\", \"yes\"]_  `type` (string) **required** _[\"newer_version\", \"new_in_version\"]_   #### Response codes `200` OK  `412` Precondition failed
   * The endpoint is owned by NStack v2 service owner
   * @param guid  (required)
   * @param updateId  (required)
   * @param answer  (required)
   * @param type  (required)
   */
  @retrofit2.http.FormUrlEncoded
  @Headers(
    "X-Operation-Id: Markupdateasseen1"
  )
  @POST("api/v1/notify/updates/views")
  fun markupdateasseen1(
    @retrofit2.http.Field("guid") guid: Int,
    @retrofit2.http.Field("update_id") updateId: Int,
    @retrofit2.http.Field("answer") answer: String,
    @retrofit2.http.Field("type") type: String
  ): Completable

}
