/**
 * NOTE: This class is auto generated by the Swagger Gradle Codegen for the following API: API
 *
 * More info on this tool is available on https://github.com/Yelp/swagger-gradle-codegen
 */

package dk.nodes.nstack.kotlin.codegen.apis

import okhttp3.RequestBody

import io.reactivex.Completable
import retrofit2.http.GET
import retrofit2.http.Headers
import retrofit2.http.POST

@JvmSuppressWildcards
interface RateRemindersApi {
  /** 
   * Show
   * Get rate reminder  #### Request details Method: `GET`  URL: `/api/v2/notify/rate_reminder`  #### Headers  `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters `guid` (int?) **required** _[?]_  `platform` (string) **required** _[is this used at all?]_  #### Response codes `200` OK  `412` Precondition failed  `445` Entity not found
   * The endpoint is owned by NStack v2 service owner
   * @param platform  (required)
   * @param guid  (required)
   */
  @Headers(
    "X-Operation-Id: GetShow",
    "Content-Type: application/json"
  )
  @GET("api/v2/notify/rate_reminder")
  fun getShow(
    @retrofit2.http.Query("platform") platform: String,
    @retrofit2.http.Query("guid") guid: Int
  ): Completable

  /** 
   * Show1
   * Get rate reminder  #### Request details Method: `GET`  URL: `/api/v1/notify/rate_reminder`  #### Headers  `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters `guid` (int?) **required** _[?]_  `platform` (string) **required** _[is this used at all?]_  #### Response codes `200` OK  `412` Precondition failed  `445` Entity not found
   * The endpoint is owned by NStack v2 service owner
   * @param platform  (required)
   * @param guid  (required)
   */
  @Headers(
    "X-Operation-Id: GetShow1",
    "Content-Type: application/json"
  )
  @GET("api/v1/notify/rate_reminder")
  fun getShow1(
    @retrofit2.http.Query("platform") platform: String,
    @retrofit2.http.Query("guid") guid: Int
  ): Completable

  /** 
   * Mark as seen1
   * Post rate reminder  #### Request details Method: `POST`  URL: `/api/v1/notify/rate_reminder/views`  #### Headers  `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters `guid` (int?) **required** _[?]_  `platform` (string) **required** _[is this used at all?]_  `answer` (string) **required** _[\"yes\", \"no\", \"later\"]_  #### Response codes `200` OK  `412` Precondition failed  `445` Entity not found
   * The endpoint is owned by NStack v2 service owner
   * @param guid  (required)
   * @param platform  (required)
   * @param answer  (required)
   */
  @retrofit2.http.FormUrlEncoded
  @Headers(
    "X-Operation-Id: Markasseen1"
  )
  @POST("api/v1/notify/rate_reminder/views")
  fun markasseen1(
    @retrofit2.http.Field("guid") guid: Int,
    @retrofit2.http.Field("platform") platform: String,
    @retrofit2.http.Field("answer") answer: String
  ): Completable

  /** 
   * Mark as seen
   * Post rate reminder  #### Request details Method: `POST`  URL: `/api/v2/notify/rate_reminder/views`  #### Headers  `X-Application-Id` (string) **required** _Application ID from [NStack](https://nstack.io)_  `X-Rest-Api-Key` (string) **required** _Rest API key from [NStack](https://nstack.io)_  #### URL Parameters `guid` (int?) **required** _[?]_  `platform` (string) **required** _[is this used at all?]_  `answer` (string) **required** _[\"yes\", \"no\", \"later\"]_  #### Response codes `200` OK  `412` Precondition failed  `445` Entity not found
   * The endpoint is owned by NStack v2 service owner
   * @param guid  (required)
   * @param platform  (required)
   * @param answer  (required)
   */
  @retrofit2.http.FormUrlEncoded
  @Headers(
    "X-Operation-Id: PostMarkasseen"
  )
  @POST("api/v2/notify/rate_reminder/views")
  fun postMarkasseen(
    @retrofit2.http.Field("guid") guid: Int,
    @retrofit2.http.Field("platform") platform: String,
    @retrofit2.http.Field("answer") answer: String
  ): Completable

}
