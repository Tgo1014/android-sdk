apply plugin: 'signing'
apply plugin: 'maven'
apply plugin: 'io.codearte.nexus-staging'

// Username & password for Sonatype, stored in gradle.properties
def _ossrhUsername = System.getenv('NEXUS_USERNAME')
def _ossrhPassword = System.getenv('NEXUS_PASSWORD')

allprojects { ext."signing.keyId" = System.getenv('keyId') }
allprojects { ext."signing.secretKeyRingFile" = System.getenv('secretKeyRingFile') }
allprojects { ext."signing.password" = System.getenv('password') }

nexusStaging {
    packageGroup = "dk.nodes"
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: _ossrhUsername, password: _ossrhPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: _ossrhUsername, password: _ossrhPassword)
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL
                    inceptionYear '2017'

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                            email POM_DEVELOPER_EMAIL
                        }
                    }

                    issueManagement {
                        system 'GitHub issues'
                        url 'https://github.com/nodes-android/nstack-kotlin/issues'
                    }
                }
            }
        }
    }

    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    def plugins = project.getPlugins()
    if (plugins.hasPlugin('com.android.application') || plugins.hasPlugin('com.android.library')) {
        task androidSourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.sourceFiles
        }

        artifacts {
            archives androidSourcesJar
        }
    }
    else {
        task sourcesJar(type: Jar, dependsOn: classes) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        task javadocsJar(type: Jar, dependsOn: javadoc) {
            classifier = 'javadoc'
            from javadoc.destinationDir
        }

        artifacts {
            archives sourcesJar
            archives javadocsJar
        }
    }

    if (JavaVersion.current().isJava8Compatible()) {
        allprojects {
            tasks.withType(Javadoc) {
                options.addStringOption('Xdoclint:none', '-quiet')
            }
        }
    }
}
